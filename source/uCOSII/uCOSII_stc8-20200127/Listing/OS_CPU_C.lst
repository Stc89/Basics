C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\Output\OS_CPU_C.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uCOS-II\MCS-51\OS_CPU_C.C LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\uCOS-II\I
                    -nc) DEBUG OBJECTEXTEND PRINT(.\Listing\OS_CPU_C.lst) OBJECT(.\Output\OS_CPU_C.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *
   6          *                          (c) Copyright 1992-2002, Jean J. Labrosse, Weston, FL
   7          *                                           All Rights Reserved
   8          *
   9          *
  10          *                                           uCOS_51 for MCS-51
  11          *
  12          * File : OS_CPU_C.C
  13          * Created by : QQ 591881218
  14          *********************************************************************************************************
  15          */
  16          
  17          //#define  OS_CPU_GLOBALS
  18          
  19          #include "includes.h"
  20          
  21          /*
  22          *********************************************************************************************************
  23          *                                             初始化任务栈
  24          *
  25          * 描述       : 本函数为OSTaskCreate()和OSTaskCreateExt()函数所调用，用于任务栈的初始化。初始化后的任务栈
  26          *                          看起来像刚刚发生过一次中断并将所有的寄存器都保存进了堆栈的情形一样。
  27          *
  28          * 参数       : task             任务代码的指针。
  29          *
  30          *                          p_arg        当任务开始执行时传递给任务的参数的指针。
  31          *
  32          *                          ptos         分配给任务堆栈的栈顶指针。
  33          *
  34          *                          opt          用于设定OSTaskCreateExt()的选项，指定是否允许堆栈检验，是否将堆栈清零，是否进行
  35          *                                               浮点操作等。当用OSTaskCreate()函数调用时，设置为0。
  36          *
  37          * 返回值         : 返回栈顶指针
  38          * 
  39          * 注意       : 任务栈结构示意图(杨屹)
  40          *
  41          *                                    ---------- -
  42          *                 用户栈最高地址---->|        | |
  43          *                                    ---------- |
  44          *                                    |   ...  | 仿真堆栈空间
  45          *----------                          ---------- | 每任务一个
  46          *|OSTCBCur|               ?C_XBP---->|        | | KEIL自动处理
  47          *----------                          ---------- -
  48          *    |                               |空闲间隔|
  49          *    |     -----------------------   ----------                           ----------
  50          *    \---->|OSTCBCur->OSTCBStkPtr|   |?C_XBP低|                    SP---->|        |
  51          *          -----------------------   ----------                           ----------
  52          *                     |              |?C_XBP高|                           |        |
  53          *                     |              ---------- -                         ----------
  54          *                     |              |        | |                         |   .    |
C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 2   

  55          *                     |              ---------- |                         |   .    |
  56          *                     |              |        | |                         |   .    |
  57          *                     |              ---------- |                         ----------
  58          *                     |              |   .    |长度                       |        | +1
  59          *                     |              |   .    | |                         ----------
  60          *                     |              |   .    | |             OSStack---->|        | 0
  61          *                     |              ---------- |                         ----------
  62          *                     |              |        | |          OSStkStart---->| 不关心 | -1  低地址
  63          *                     |              ---------- -                         ----------
  64          *                     \------------->|  长度  | 低地址                   系统硬件堆栈
  65          *                                    ----------
  66          *                                     用户堆栈                        长度=SP-OSStkStart
  67          *********************************************************************************************************
  68          */
  69          OS_STK         *OSTaskStkInit           (void           (*task)(void *p_arg),
  70                                                 void            *p_arg,
  71                                                 OS_STK          *ptos,
  72                                                 INT16U           opt) large reentrant
  73          {
  74   1              OS_STK *stk;
  75   1              p_arg=p_arg;
  76   1              opt       =opt;                                         /* opt没被用到，保留此语句防止警告产生                  */
  77   1              stk       =(OS_STK *)ptos;                      /* 任务堆栈最低有效地址                                                 */
  78   1              *stk++=15;                                              /* 任务堆栈长度                                                                 */
  79   1              *stk++=(INT16U)task & 0xFF;             /* 任务代码地址低8位                                                    */
  80   1              *stk++=(INT16U)task >> 8;               /* 任务代码地址高8位                                                    */
  81   1              /* 处理器是按特定的顺序将寄存器存入堆栈的，所以用户在将寄存器存入堆栈的时候也要依照这一顺序 */
  82   1              *stk++=0x00;                                    /* PSW                                                                                  */
  83   1              *stk++=0x0A;                                    /* ACC                                                                                  */
  84   1              *stk++=0x0B;                                    /* B                                                                                    */
  85   1              *stk++=0x00;                                    /* DPL                                                                                  */
  86   1              *stk++=0x00;                                    /* DPH                                                                                  */
  87   1              *stk++=0x00;                                    /* R0                                                                                   */
  88   1              *stk++=0x01;                                    /* R1                                                                                   */
  89   1              *stk++=0x02;                                    /* R2                                                                                   */
  90   1              *stk++=0x03;                                    /* R3                                                                                   */      
  91   1              *stk++=0x04;                                    /* R4                                                                                   */
  92   1              *stk++=0x05;                                    /* R5                                                                                   */
  93   1              *stk++=0x06;                                    /* R6                                                                                   */
  94   1              *stk++=0x07;                                    /* R7                                                                                   */
  95   1              /* 不用保存SP，任务切换时根据用户堆栈长度计算得出                                                               */
  96   1              *stk++=(INT16U)(ptos+MAX_STK_SIZE) >> 8;        /* ?C_XBP 仿真堆栈指针高8位             */
  97   1              *stk++=(INT16U)(ptos+MAX_STK_SIZE) & 0xFF;      /* ?C_XBP 仿真堆栈低8位                         */
  98   1              return ((void *)ptos);  /* 返回最低地址，这里不用弹出栈顶指针是为了提高计算效率 */
  99   1      }
 100          
 101          /*********************************************** 钩子函数 ***********************************************/
 102          
 103          #if OS_CPU_HOOKS_EN
              /*
              *********************************************************************************************************
              *                                       OS INITIALIZATION HOOK
              *                                            (BEGINNING)
              *
              * Description: This function is called by OSInit() at the beginning of OSInit().
              *
              * Arguments  : none
              *
              * Note(s)    : 1) Interrupts should be disabled during this call.
              *********************************************************************************************************
              */
              #if OS_VERSION > 203
C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 3   

              void OSInitHookBegin (void) large reentrant
              {
              }
              #endif
              
              /*
              *********************************************************************************************************
              *                                       OS INITIALIZATION HOOK
              *                                               (END)
              *
              * Description: This function is called by OSInit() at the end of OSInit().
              *
              * Arguments  : none
              *
              * Note(s)    : 1) Interrupts should be disabled during this call.
              *********************************************************************************************************
              */
              #if OS_VERSION > 203
              void OSInitHookEnd (void) large reentrant
              {
              }
              #endif
              
              /*
              *********************************************************************************************************
              *                                          TASK CREATION HOOK
              *
              * Description: This function is called when a task is created.
              *
              * Arguments  : ptcb   is a pointer to the task control block of the task being created.
              *
              * Note(s)    : 1) Interrupts are disabled during this call.
              *********************************************************************************************************
              */
              void OSTaskCreateHook (OS_TCB *ptcb) large reentrant
              {
                  ptcb = ptcb;                       /* Prevent compiler warning                                     */
              }
              
              /*
              *********************************************************************************************************
              *                                           TASK DELETION HOOK
              *
              * Description: This function is called when a task is deleted.
              *
              * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
              *
              * Note(s)    : 1) Interrupts are disabled during this call.
              *********************************************************************************************************
              */
              void OSTaskDelHook (OS_TCB *ptcb) large reentrant
              {
                  ptcb = ptcb;                       /* Prevent compiler warning                                     */
              }
              
              /*
              *********************************************************************************************************
              *                                           TASK SWITCH HOOK
              *
              * Description: This function is called when a task switch is performed.  This allows you to perform other
              *              operations during a context switch.
              *
C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 4   

              * Arguments  : none
              *
              * Note(s)    : 1) Interrupts are disabled during this call.
              *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
              *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the 
              *                 task being switched out (i.e. the preempted task).
              *********************************************************************************************************
              */
              void OSTaskSwHook (void) large reentrant
              {
              }
              
              /*
              *********************************************************************************************************
              *                                           STATISTIC TASK HOOK
              *
              * Description: This function is called every second by uC/OS-II's statistics task.  This allows your 
              *              application to add functionality to the statistics task.
              *
              * Arguments  : none
              *********************************************************************************************************
              */
              void OSTaskStatHook (void) large reentrant
              {
              }
              
              /*
              *********************************************************************************************************
              *                                            TASK RETURN HOOK
              *
              * Description: This function is called if a task accidentally returns.  In other words, a task should
              *              either be an infinite loop or delete itself when done.
              *
              * Arguments  : ptcb      is a pointer to the task control block of the task that is returning.
              *
              * Note(s)    : none
              *********************************************************************************************************
              */
              
              #if OS_CPU_HOOKS_EN > 0u
              void  OSTaskReturnHook (OS_TCB  *ptcb) large reentrant
              {
              #if OS_APP_HOOKS_EN > 0u
                  App_TaskReturnHook(ptcb);
              #else
                  (void)ptcb;
              #endif
              }
              #endif
              
              /*
              *********************************************************************************************************
              *                                           OSTCBInit() HOOK
              *
              * Description: This function is called by OSTCBInit() after setting up most of the TCB.
              *
              * Arguments  : ptcb    is a pointer to the TCB of the task being created.
              *
              * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
              *********************************************************************************************************
              */
              #if OS_VERSION > 203
C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 5   

              void OSTCBInitHook (OS_TCB *ptcb) large reentrant
              {
                  ptcb = ptcb;                                           /* Prevent Compiler warning                 */
              }
              #endif
              
              /*
              *********************************************************************************************************
              *                                               TICK HOOK
              *
              * Description: This function is called every tick.
              *
              * Arguments  : none
              *
              * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
              *********************************************************************************************************
              */
              void OSTimeTickHook (void) large reentrant
              {
              }
              
              /*
              *********************************************************************************************************
              *                                             IDLE TASK HOOK
              *
              * Description: This function is called by the idle task.  This hook has been added to allow you to do  
              *              such things as STOP the CPU to conserve power.
              *
              * Arguments  : none
              *
              * Note(s)    : 1) Interrupts are enabled during this call.
              *********************************************************************************************************
              */
              #if OS_VERSION >= 251
              void OSTaskIdleHook (void) large reentrant
              {
              }
              #endif
              
              #endif
 281          
 282          /********************************************************************************************************/
 283          
 284          /* 初始化定时器0，用于产生时钟节拍 */
 285          void InitTimer0(void) large reentrant
 286          {
 287   1          TMOD = 0x03;                                //模式3
 288   1          TL0 = -(24000000UL/12/50);//0x66;                                 //65536-11.0592M/12/1000
 289   1          TH0 = (-(24000000UL/12/50)) >> 8;//0xfc;
 290   1          TR0 = 1;                                    //启动定时器
 291   1          ET0 = 1;                                    //使能定时器中断
 292   1              //EA=0; /* EA和ET0，51上电缺省值为0，EA将在OSStartHighRdy()中打开 */
 293   1        
 294   1      }
 295          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    292    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   OS_CPU_C                                                              10/09/2020 18:11:58 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
