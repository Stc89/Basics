C51 COMPILER V9.60.0.0   OS_TIME                                                           01/22/2020 20:57:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OS_TIME
OBJECT MODULE PLACED IN .\Output\OS_TIME.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uCOS-II\Src\OS_TIME.C LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\uCOS-II\In
                    -c) DEBUG OBJECTEXTEND PRINT(.\Listing\OS_TIME.lst) OBJECT(.\Output\OS_TIME.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                             TIME MANAGEMENT
   6          *
   7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
   8          *                                           All Rights Reserved
   9          *
  10          * File    : OS_TIME.C
  11          * By      : Jean J. Labrosse
  12          * Version : V2.91
  13          *
  14          * LICENSING TERMS:
  15          * ---------------
  16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
  17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
  18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
  19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
  20          * licensing fee.
  21          *********************************************************************************************************
  22          */
  23          
  24          #ifndef  OS_MASTER_FILE
  25          #include <includes.h>
  26          #endif
  27          
  28          /*
  29          *********************************************************************************************************
  30          *                                       DELAY TASK 'n' TICKS
  31          *
  32          * Description: This function is called to delay execution of the currently running task until the
  33          *              specified number of system ticks expires.  This, of course, directly equates to delaying
  34          *              the current task for some time to expire.  No delay will result If the specified delay is
  35          *              0.  If the specified delay is greater than 0 then, a context switch will result.
  36          *
  37          * Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
  38          *                        Note that by specifying 0, the task will not be delayed.
  39          *
  40          * Returns    : none
  41          *********************************************************************************************************
  42          */
  43          
  44          void  OSTimeDly (INT32U ticks) large reentrant
  45          {
  46   1          INT8U      y;
  47   1      #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
  50   1      
  51   1      
  52   1      
  53   1          if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
  54   2              return;
C51 COMPILER V9.60.0.0   OS_TIME                                                           01/22/2020 20:57:57 PAGE 2   

  55   2          }
  56   1          if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
  57   2              return;
  58   2          }
  59   1          if (ticks > 0u) {                            /* 0 means no delay!                                  */
  60   2              OS_ENTER_CRITICAL();
  61   2              y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  62   2              OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
  63   2              if (OSRdyTbl[y] == 0u) {
  64   3                  OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
  65   3              }
  66   2              OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  67   2              OS_EXIT_CRITICAL();
  68   2              OS_Sched();                              /* Find next task to run!                             */
  69   2          }
  70   1      }
  71          /*$PAGE*/
  72          /*
  73          *********************************************************************************************************
  74          *                                     DELAY TASK FOR SPECIFIED TIME
  75          *
  76          * Description: This function is called to delay execution of the currently running task until some time
  77          *              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
  78          *              MILLISECONDS instead of ticks.
  79          *
  80          * Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
  81          *              minutes   specifies the number of minutes (max. 59)
  82          *              seconds   specifies the number of seconds (max. 59)
  83          *              ms        specifies the number of milliseconds (max. 999)
  84          *
  85          * Returns    : OS_ERR_NONE
  86          *              OS_ERR_TIME_INVALID_MINUTES
  87          *              OS_ERR_TIME_INVALID_SECONDS
  88          *              OS_ERR_TIME_INVALID_MS
  89          *              OS_ERR_TIME_ZERO_DLY
  90          *              OS_ERR_TIME_DLY_ISR
  91          *
  92          * Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
  93          *              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
  94          *              set to 0.  The actual delay is rounded to the nearest tick.
  95          *********************************************************************************************************
  96          */
  97          
  98          #if OS_TIME_DLY_HMSM_EN > 0u
  99          INT8U  OSTimeDlyHMSM (INT8U   hours,
 100                                INT8U   minutes,
 101                                INT8U   seconds,
 102                                INT16U  ms) large reentrant
 103          {
 104   1          INT32U ticks;
 105   1      
 106   1      
 107   1          if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 108   2              return (OS_ERR_TIME_DLY_ISR);
 109   2          }
 110   1          if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 111   2              return (OS_ERR_SCHED_LOCKED);
 112   2          }
 113   1      #if OS_ARG_CHK_EN > 0u
                  if (hours == 0u) {
                      if (minutes == 0u) {
                          if (seconds == 0u) {
C51 COMPILER V9.60.0.0   OS_TIME                                                           01/22/2020 20:57:57 PAGE 3   

                              if (ms == 0u) {
                                  return (OS_ERR_TIME_ZERO_DLY);
                              }
                          }
                      }
                  }
                  if (minutes > 59u) {
                      return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
                  }
                  if (seconds > 59u) {
                      return (OS_ERR_TIME_INVALID_SECONDS);
                  }
                  if (ms > 999u) {
                      return (OS_ERR_TIME_INVALID_MS);
                  }
              #endif
 133   1                                                       /* Compute the total number of clock ticks required.. */
 134   1                                                       /* .. (rounded to the nearest tick)                   */
 135   1          ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 136   1                + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 137   1          OSTimeDly(ticks);
 138   1          return (OS_ERR_NONE);
 139   1      }
 140          #endif
 141          /*$PAGE*/
 142          /*
 143          *********************************************************************************************************
 144          *                                         RESUME A DELAYED TASK
 145          *
 146          * Description: This function is used resume a task that has been delayed through a call to either
 147          *              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
 148          *              task that is waiting for an event with timeout.  This would make the task look
 149          *              like a timeout occurred.
 150          *
 151          * Arguments  : prio                      specifies the priority of the task to resume
 152          *
 153          * Returns    : OS_ERR_NONE               Task has been resumed
 154          *              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
 155          *                                        (i.e. >= OS_LOWEST_PRIO)
 156          *              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
 157          *              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a M
             -utex.
 158          *********************************************************************************************************
 159          */
 160          
 161          #if OS_TIME_DLY_RESUME_EN > 0u
              INT8U  OSTimeDlyResume (INT8U prio) large reentrant
              {
                  OS_TCB    *ptcb;
              #if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
                  if (prio >= OS_LOWEST_PRIO) {
                      return (OS_ERR_PRIO_INVALID);
                  }
                  OS_ENTER_CRITICAL();
                  ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
                  if (ptcb == (OS_TCB *)0) {
                      OS_EXIT_CRITICAL();
C51 COMPILER V9.60.0.0   OS_TIME                                                           01/22/2020 20:57:57 PAGE 4   

                      return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
                  }
                  if (ptcb == OS_TCB_RESERVED) {
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
                  }
                  if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
                  }
              
                  ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
                  if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                      ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
                      ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
                  } else {
                      ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
                  }
                  if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
                      OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
                      OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                            /* See if this is new highest priority  */
                  } else {
                      OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
                  }
                  return (OS_ERR_NONE);
              }
              #endif
 207          /*$PAGE*/
 208          /*
 209          *********************************************************************************************************
 210          *                                         GET CURRENT SYSTEM TIME
 211          *
 212          * Description: This function is used by your application to obtain the current value of the 32-bit
 213          *              counter which keeps track of the number of clock ticks.
 214          *
 215          * Arguments  : none
 216          *
 217          * Returns    : The current value of OSTime
 218          *********************************************************************************************************
 219          */
 220          
 221          #if OS_TIME_GET_SET_EN > 0u
              INT32U  OSTimeGet (void) large reentrant
              {
                  INT32U     ticks;
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
                  OS_ENTER_CRITICAL();
                  ticks = OSTime;
                  OS_EXIT_CRITICAL();
                  return (ticks);
              }
              #endif
 237          
 238          /*
 239          *********************************************************************************************************
C51 COMPILER V9.60.0.0   OS_TIME                                                           01/22/2020 20:57:57 PAGE 5   

 240          *                                            SET SYSTEM CLOCK
 241          *
 242          * Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
 243          *
 244          * Arguments  : ticks      specifies the new value that OSTime needs to take.
 245          *
 246          * Returns    : none
 247          *********************************************************************************************************
 248          */
 249          
 250          #if OS_TIME_GET_SET_EN > 0u
              void  OSTimeSet (INT32U ticks) large reentrant
              {
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
                  OS_ENTER_CRITICAL();
                  OSTime = ticks;
                  OS_EXIT_CRITICAL();
              }
              #endif
 264                                                                                                                                                                                                                                                                                                                                                                                                                                                           
             -                                                                                                                                                                                                    


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    489    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
