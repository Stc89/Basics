C51 COMPILER V9.00   LED_002                                                               10/28/2020 16:35:27 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LED_002
OBJECT MODULE PLACED IN LED-002.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LED-002.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include    "reg51.h"
  14          #include    <string.h>
  15          
  16          #define     MAIN_Fosc       24000000L   //定义主时钟
  17          
  18          /*************  功能说明    **************
  19          
  20          程序使用P6口来演示跑马灯，输出低驱动。
  21          
  22          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  23          
  24          当用户使用硬件 USB 对 STC8H8K64U 系列进行 ISP 下载时不能调节内部 IRC 的频率，
  25          但用户可用选择内部预置的 16 个频率
  26          （分别是 5.5296M、 6M、 11.0592M、 12M、 18.432M、 20M、 22.1184M、 
  27          24M、27M、 30M、 33.1776M、 35M、 36.864M、 40M、 44.2368M 和 48M）。
  28          下载时用户只能从频率下拉列表中进行选择其中之一，而不能手动输入其他频率。
  29          （使用串口下载则可用输入 4M～48M 之间的任意频率）。
  30          
  31          ******************************************/
  32          
  33          typedef     unsigned char   u8;
  34          typedef     unsigned int    u16;
  35          typedef     unsigned long   u32;
  36          
  37          sfr P4   = 0xC0;
  38          sfr P5   = 0xC8;
  39          sfr P6   = 0xE8;
  40          sfr P7   = 0xF8;
  41          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  42          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  43          sfr P0M1 = 0x93;
  44          sfr P0M0 = 0x94;
  45          sfr P2M1 = 0x95;
  46          sfr P2M0 = 0x96;
  47          sfr P3M1 = 0xB1;
  48          sfr P3M0 = 0xB2;
  49          sfr P4M1 = 0xB3;
  50          sfr P4M0 = 0xB4;
  51          sfr P5M1 = 0xC9;
  52          sfr P5M0 = 0xCA;
  53          sfr P6M1 = 0xCB;
  54          sfr P6M0 = 0xCC;
  55          sfr P7M1 = 0xE1;
C51 COMPILER V9.00   LED_002                                                               10/28/2020 16:35:27 PAGE 2   

  56          sfr P7M0 = 0xE2;
  57          
  58          sbit P00 = P0^0;
  59          sbit P01 = P0^1;
  60          sbit P02 = P0^2;
  61          sbit P03 = P0^3;
  62          sbit P04 = P0^4;
  63          sbit P05 = P0^5;
  64          sbit P06 = P0^6;
  65          sbit P07 = P0^7;
  66          sbit P10 = P1^0;
  67          sbit P11 = P1^1;
  68          sbit P12 = P1^2;
  69          sbit P13 = P1^3;
  70          sbit P14 = P1^4;
  71          sbit P15 = P1^5;
  72          sbit P16 = P1^6;
  73          sbit P17 = P1^7;
  74          sbit P20 = P2^0;
  75          sbit P21 = P2^1;
  76          sbit P22 = P2^2;
  77          sbit P23 = P2^3;
  78          sbit P24 = P2^4;
  79          sbit P25 = P2^5;
  80          sbit P26 = P2^6;
  81          sbit P27 = P2^7;
  82          sbit P30 = P3^0;
  83          sbit P31 = P3^1;
  84          sbit P32 = P3^2;
  85          sbit P33 = P3^3;
  86          sbit P34 = P3^4;
  87          sbit P35 = P3^5;
  88          sbit P36 = P3^6;
  89          sbit P37 = P3^7;
  90          sbit P40 = P4^0;
  91          sbit P41 = P4^1;
  92          sbit P42 = P4^2;
  93          sbit P43 = P4^3;
  94          sbit P44 = P4^4;
  95          sbit P45 = P4^5;
  96          sbit P46 = P4^6;
  97          sbit P47 = P4^7;
  98          sbit P50 = P5^0;
  99          sbit P51 = P5^1;
 100          sbit P52 = P5^2;
 101          sbit P53 = P5^3;
 102          sbit P54 = P5^4;
 103          sbit P55 = P5^5;
 104          sbit P56 = P5^6;
 105          sbit P57 = P5^7;
 106          
 107          u8 ledIndex;
 108          u8 code ledNum[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 109          
 110          void  delay_ms(u8 ms);
 111          
 112          #define KEY_0  P57 /*按键*/
 113          #define UP_500W P56 /*上层管*/
 114          #define DOWN_200W P55 /*下层管*/
 115          #define FUNJI P54 /*风机*/ 
 116          #define true (1)
 117          #define false (0)
C51 COMPILER V9.00   LED_002                                                               10/28/2020 16:35:27 PAGE 3   

 118          
 119          enum STATE{
 120          
 121                  STATE_UP_ON, /*启动上层管700W*/
 122                  STATE_DOWN_ON, /*启动下层管200W*/
 123                  STATE_FUN_ON, /*启动风机*/
 124                  STATE_TIME1_5MIN, /*定时器1 5分钟*/
 125                  STATE_TIME2_10MIN, /*定时器2 10分钟*/
 126                  STATE_TIME3_5MIN, /*定时器3 5分钟*/
 127                  
 128                  STATE_idle,       /*空闲*/
 129          };
 130          
 131          struct strg_data{
 132                  int time_cout;
 133          };
 134          
 135          enum STATE sys_state;
 136          struct strg_data stu_data;
 137          
 138          void gpio_init(void)
 139          {
 140   1              P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 141   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 142   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 143   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 144   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 145   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 146   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 147   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 148   1      }
 149          
 150          unsigned char get_key_value(void)
 151          {
 152   1              if(KEY_0 == 1){
 153   2                      delay_ms(200);
 154   2                      if(KEY_0 == 1){
 155   3                              return (true);
 156   3                      }
 157   2              }
 158   1              return (false);
 159   1      }
 160          
 161          /******************** 主函数 **************************/
 162          void main(void)
 163          {
 164   1      
 165   1              gpio_init();
 166   1      
 167   1              sys_state =  STATE_idle;
 168   1      
 169   1              memset(&stu_data,0,sizeof(stu_data));
 170   1          while(1)
 171   1          {
 172   2                      if(get_key_value() && sys_state == STATE_idle){
 173   3                              sys_state = STATE_UP_ON;
 174   3                      }
 175   2      
 176   2                      switch(sys_state)
 177   2                      {
 178   3                              case STATE_UP_ON:
 179   3                              {
C51 COMPILER V9.00   LED_002                                                               10/28/2020 16:35:27 PAGE 4   

 180   4                                       DOWN_200W = 1; /*启动下层管*/
 181   4                                       sys_state = STATE_TIME2_10MIN; 
 182   4                              }
 183   3                              break; 
 184   3                              case STATE_TIME1_5MIN:
 185   3                              {
 186   4                                       stu_data.time_cout ++;
 187   4                                       delay_ms(1000);
 188   4                                       if(stu_data.time_cout >= 5*60){
 189   5                                              stu_data.time_cout = 0;
 190   5                                              sys_state = STATE_DOWN_ON;
 191   5                                       }
 192   4                              }
 193   3                              break; 
 194   3                              case STATE_TIME2_10MIN:
 195   3                              {
 196   4                                       stu_data.time_cout ++;
 197   4                                       delay_ms(1000);
 198   4                                       if(stu_data.time_cout >= 10*60){
 199   5                                              stu_data.time_cout = 0;
 200   5                                              sys_state = STATE_TIME3_5MIN;
 201   5      
 202   5                                              DOWN_200W = 0; /*关闭下层管*/
 203   5                                              FUNJI = 1; /*启动风机*/
 204   5                                       }
 205   4                              }
 206   3                              break;
 207   3                              case STATE_TIME3_5MIN:
 208   3                              {
 209   4                                       stu_data.time_cout ++;
 210   4                                       delay_ms(1000);
 211   4                                       if(stu_data.time_cout >= 5*60){
 212   5                                              stu_data.time_cout = 0;
 213   5                                              sys_state = STATE_idle;
 214   5      
 215   5                                              UP_500W = 0; /*关闭上层管*/
 216   5                                              FUNJI = 0; /*关闭风机*/
 217   5                                       }
 218   4                              }
 219   3                              break;
 220   3      
 221   3                              default:
 222   3      
 223   3                              break;
 224   3                      }
 225   2          }
 226   1      }
 227          
 228          //========================================================================
 229          // 函数: void  delay_ms(u8 ms)
 230          // 描述: 延时函数。
 231          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 232          // 返回: none.
 233          // 版本: VER1.0
 234          // 日期: 2013-4-1
 235          // 备注: 
 236          //========================================================================
 237          void  delay_ms(u8 ms)
 238          {
 239   1           u16 i;
 240   1           do{
 241   2                i = MAIN_Fosc / 13000;
C51 COMPILER V9.00   LED_002                                                               10/28/2020 16:35:27 PAGE 5   

 242   2                while(--i)    ;   //14T per loop
 243   2           }while(--ms);
 244   1      }
 245          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    245    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
