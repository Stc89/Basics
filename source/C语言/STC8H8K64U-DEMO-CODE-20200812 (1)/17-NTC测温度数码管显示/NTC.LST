C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE NTC
OBJECT MODULE PLACED IN NTC.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE NTC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 -----------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          读ADC和测温度.
  17          
  18          用STC的MCU的IO方式驱动8位数码管。
  19          
  20          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  21          
  22          左边4位数码管显示ADC2接的电压基准TL431的读数, 右边4位数码管显示温度值, 分辨率0.1度.
  23          
  24          NTC使用1%精度的MF52 10K@25度.
  25          
  26          测温度时, 使用12位的ADC值, 使用对分查找表格来计算, 小数点后一位数是用线性插补来计算的.
  27          
  28          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  29          
  30          ******************************************/
  31          
  32          #include    "reg51.h"
  33          #include    "intrins.h"
  34          
  35          #define     MAIN_Fosc       24000000L   //定义主时钟
  36          
  37          typedef     unsigned char   u8;
  38          typedef     unsigned int    u16;
  39          typedef     unsigned long   u32;
  40          
  41          sfr TH2  = 0xD6;
  42          sfr TL2  = 0xD7;
  43          sfr IE2   = 0xAF;
  44          sfr INT_CLKO = 0x8F;
  45          sfr AUXR = 0x8E;
  46          sfr AUXR1 = 0xA2;
  47          sfr P_SW1 = 0xA2;
  48          sfr P_SW2 = 0xBA;
  49          sfr S2CON = 0x9A;
  50          sfr S2BUF = 0x9B;
  51          
  52          sfr ADC_CONTR = 0xBC;   //带AD系列
  53          sfr ADC_RES   = 0xBD;   //带AD系列
  54          sfr ADC_RESL  = 0xBE;   //带AD系列
  55          sfr ADCCFG = 0xde;
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 2   

  56          
  57          sfr P4   = 0xC0;
  58          sfr P5   = 0xC8;
  59          sfr P6   = 0xE8;
  60          sfr P7   = 0xF8;
  61          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  62          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  63          sfr P0M1 = 0x93;
  64          sfr P0M0 = 0x94;
  65          sfr P2M1 = 0x95;
  66          sfr P2M0 = 0x96;
  67          sfr P3M1 = 0xB1;
  68          sfr P3M0 = 0xB2;
  69          sfr P4M1 = 0xB3;
  70          sfr P4M0 = 0xB4;
  71          sfr P5M1 = 0xC9;
  72          sfr P5M0 = 0xCA;
  73          sfr P6M1 = 0xCB;
  74          sfr P6M0 = 0xCC;
  75          sfr P7M1 = 0xE1;
  76          sfr P7M0 = 0xE2;
  77          
  78          sbit P00 = P0^0;
  79          sbit P01 = P0^1;
  80          sbit P02 = P0^2;
  81          sbit P03 = P0^3;
  82          sbit P04 = P0^4;
  83          sbit P05 = P0^5;
  84          sbit P06 = P0^6;
  85          sbit P07 = P0^7;
  86          sbit P10 = P1^0;
  87          sbit P11 = P1^1;
  88          sbit P12 = P1^2;
  89          sbit P13 = P1^3;
  90          sbit P14 = P1^4;
  91          sbit P15 = P1^5;
  92          sbit P16 = P1^6;
  93          sbit P17 = P1^7;
  94          sbit P20 = P2^0;
  95          sbit P21 = P2^1;
  96          sbit P22 = P2^2;
  97          sbit P23 = P2^3;
  98          sbit P24 = P2^4;
  99          sbit P25 = P2^5;
 100          sbit P26 = P2^6;
 101          sbit P27 = P2^7;
 102          sbit P30 = P3^0;
 103          sbit P31 = P3^1;
 104          sbit P32 = P3^2;
 105          sbit P33 = P3^3;
 106          sbit P34 = P3^4;
 107          sbit P35 = P3^5;
 108          sbit P36 = P3^6;
 109          sbit P37 = P3^7;
 110          sbit P40 = P4^0;
 111          sbit P41 = P4^1;
 112          sbit P42 = P4^2;
 113          sbit P43 = P4^3;
 114          sbit P44 = P4^4;
 115          sbit P45 = P4^5;
 116          sbit P46 = P4^6;
 117          sbit P47 = P4^7;
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 3   

 118          sbit P50 = P5^0;
 119          sbit P51 = P5^1;
 120          sbit P52 = P5^2;
 121          sbit P53 = P5^3;
 122          sbit P54 = P5^4;
 123          sbit P55 = P5^5;
 124          sbit P56 = P5^6;
 125          sbit P57 = P5^7;
 126          
 127          
 128          /****************************** 用户定义宏 ***********************************/
 129          
 130          #define ADCTIM (*(unsigned char volatile xdata *)0xfea8)
 131          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 132          
 133          /*****************************************************************************/
 134          
 135          
 136          #define DIS_DOT     0x20
 137          #define DIS_BLACK   0x10
 138          #define DIS_        0x11
 139          
 140          
 141          /*************  本地常量声明    **************/
 142          u8 code t_display[]={                       //标准字库
 143          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 144              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 145          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 146              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 147              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 148          
 149          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 150          
 151          
 152          /*************  本地变量声明    **************/
 153          
 154          u8  LED8[8];        //显示缓冲
 155          u8  display_index;  //显示位索引
 156          bit B_1ms;          //1ms标志
 157          
 158          u16 msecond;
 159          
 160          /*************  本地函数声明    **************/
 161          u16 get_temperature(u16 adc);
 162          u16 Get_ADC12bitResult(u8 channel); //channel = 0~7
 163          
 164          /**********************************************/
 165          void main(void)
 166          {
 167   1          u8  i;
 168   1          u16 j;
 169   1          
 170   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 171   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 172   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 173   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 174   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 175   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 176   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 177   1          P1M1 = 0x08;   P1M0 = 0;   //设置 P1.3 为 ADC 输入口
 178   1      
 179   1          display_index = 0;
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 4   

 180   1          P_SW2 |= 0x80;
 181   1          ADCTIM = 0x3f;    //设置 ADC 内部时序，ADC采样时间建议设最大值
 182   1          P_SW2 &= 0x7f;
 183   1          ADCCFG = 0x2f;    //设置 ADC 时钟为系统时钟/2/16/16
 184   1          ADC_CONTR = 0x80; //使能 ADC 模块
 185   1      
 186   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 187   1          TH0 = (u8)(Timer0_Reload / 256);
 188   1          TL0 = (u8)(Timer0_Reload % 256);
 189   1          ET0 = 1;    //Timer0 interrupt enable
 190   1          TR0 = 1;    //Tiner0 run
 191   1          EA = 1;     //打开总中断
 192   1          
 193   1          for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 194   1          
 195   1          while(1)
 196   1          {
 197   2              if(B_1ms)   //1ms到
 198   2              {
 199   3                  B_1ms = 0;
 200   3                  if(++msecond >= 300)    //300ms到
 201   3                  {
 202   4                      msecond = 0;
 203   4      //                j = Get_ADC12bitResult(2);  //参数0~7,查询方式做一次ADC, 返回值就是结果, == 4096 为错误
 204   4      //                
 205   4      //                if(j < 4096)
 206   4      //                {
 207   4      //                    LED8[0] = j / 1000;     //显示ADC值
 208   4      //                    LED8[1] = (j % 1000) / 100;
 209   4      //                    LED8[2] = (j % 100) / 10;
 210   4      //                    LED8[3] = j % 10;
 211   4      //                    if(LED8[0] == 0)    LED8[0] = DIS_BLACK;
 212   4      //                }
 213   4      //                else    //错误
 214   4      //                {
 215   4      //                    for(i=0; i<4; i++)  LED8[i] = DIS_;
 216   4      //                }
 217   4                      
 218   4                      j = Get_ADC12bitResult(3);  //参数0~7,查询方式做一次ADC, 返回值就是结果, == 4096 为错误
 219   4      
 220   4                      if(j < 4096)
 221   4                      {
 222   5                      /*
 223   5                          LED8[0] = j / 1000;     //显示ADC值
 224   5                          LED8[1] = (j % 1000) / 100;
 225   5                          LED8[2] = (j % 100) / 10;
 226   5                          LED8[3] = j % 10;
 227   5                          if(LED8[0] == 0)    LED8[0] = DIS_BLACK;
 228   5                      */
 229   5                          j = get_temperature(j); //计算温度值
 230   5      
 231   5                          if(j >= 400)    F0 = 0, j -= 400;       //温度 >= 0度
 232   5                          else            F0 = 1, j  = 400 - j;   //温度 <  0度
 233   5                          LED8[4] = j / 1000;     //显示温度值
 234   5                          LED8[5] = (j % 1000) / 100;
 235   5                          LED8[6] = (j % 100) / 10 + DIS_DOT;
 236   5                          LED8[7] = j % 10;
 237   5                          if(LED8[4] == 0)    LED8[4] = DIS_BLACK;
 238   5                          if(F0)  LED8[4] = DIS_;     //显示-
 239   5                      }
 240   4                      else    //错误
 241   4                      {
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 5   

 242   5                          for(i=0; i<8; i++)  LED8[i] = DIS_;
 243   5                      }
 244   4                  }
 245   3              }
 246   2          }
 247   1      } 
 248          /**********************************************/
 249          
 250          //========================================================================
 251          // 函数: u16 Get_ADC12bitResult(u8 channel)
 252          // 描述: 查询法读一次ADC结果.
 253          // 参数: channel: 选择要转换的ADC.
 254          // 返回: 12位ADC结果.
 255          // 版本: V1.0, 2012-10-22
 256          //========================================================================
 257          u16 Get_ADC12bitResult(u8 channel)  //channel = 0~7
 258          {
 259   1          ADC_RES = 0;
 260   1          ADC_RESL = 0;
 261   1      
 262   1          ADC_CONTR |= (0x40 | channel); //启动 AD 转换
 263   1          _nop_();
 264   1          _nop_();
 265   1          _nop_();
 266   1          _nop_();
 267   1      
 268   1          while((ADC_CONTR & 0x20) == 0)  ;   //wait for ADC finish
 269   1          ADC_CONTR &= ~0x20;     //清除ADC结束标志
 270   1          return  (((u16)ADC_RES << 8) | ADC_RESL);
 271   1      }
 272          
 273          
 274          //  MF52E 10K at 25, B = 3950, ADC = 12 bits
 275          u16 code temp_table[]={
 276                  140,    //;-40  0
 277                  149,    //;-39  1
 278                  159,    //;-38  2
 279                  168,    //;-37  3
 280                  178,    //;-36  4
 281                  188,    //;-35  5
 282                  199,    //;-34  6
 283                  210,    //;-33  7
 284                  222,    //;-32  8
 285                  233,    //;-31  9
 286                  246,    //;-30  10
 287                  259,    //;-29  11
 288                  272,    //;-28  12
 289                  286,    //;-27  13
 290                  301,    //;-26  14
 291                  317,    //;-25  15
 292                  333,    //;-24  16
 293                  349,    //;-23  17
 294                  367,    //;-22  18
 295                  385,    //;-21  19
 296                  403,    //;-20  20
 297                  423,    //;-19  21
 298                  443,    //;-18  22
 299                  464,    //;-17  23
 300                  486,    //;-16  24
 301                  509,    //;-15  25
 302                  533,    //;-14  26
 303                  558,    //;-13  27
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 6   

 304                  583,    //;-12  28
 305                  610,    //;-11  29
 306                  638,    //;-10  30
 307                  667,    //;-9   31
 308                  696,    //;-8   32
 309                  727,    //;-7   33
 310                  758,    //;-6   34
 311                  791,    //;-5   35
 312                  824,    //;-4   36
 313                  858,    //;-3   37
 314                  893,    //;-2   38
 315                  929,    //;-1   39
 316                  965,    //;0    40
 317                  1003,   //;1    41
 318                  1041,   //;2    42
 319                  1080,   //;3    43
 320                  1119,   //;4    44
 321                  1160,   //;5    45
 322                  1201,   //;6    46
 323                  1243,   //;7    47
 324                  1285,   //;8    48
 325                  1328,   //;9    49
 326                  1371,   //;10   50
 327                  1414,   //;11   51
 328                  1459,   //;12   52
 329                  1503,   //;13   53
 330                  1548,   //;14   54
 331                  1593,   //;15   55
 332                  1638,   //;16   56
 333                  1684,   //;17   57
 334                  1730,   //;18   58
 335                  1775,   //;19   59
 336                  1821,   //;20   60
 337                  1867,   //;21   61
 338                  1912,   //;22   62
 339                  1958,   //;23   63
 340                  2003,   //;24   64
 341                  2048,   //;25   65
 342                  2093,   //;26   66
 343                  2137,   //;27   67
 344                  2182,   //;28   68
 345                  2225,   //;29   69
 346                  2269,   //;30   70
 347                  2312,   //;31   71
 348                  2354,   //;32   72
 349                  2397,   //;33   73
 350                  2438,   //;34   74
 351                  2479,   //;35   75
 352                  2519,   //;36   76
 353                  2559,   //;37   77
 354                  2598,   //;38   78
 355                  2637,   //;39   79
 356                  2675,   //;40   80
 357                  2712,   //;41   81
 358                  2748,   //;42   82
 359                  2784,   //;43   83
 360                  2819,   //;44   84
 361                  2853,   //;45   85
 362                  2887,   //;46   86
 363                  2920,   //;47   87
 364                  2952,   //;48   88
 365                  2984,   //;49   89
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 7   

 366                  3014,   //;50   90
 367                  3044,   //;51   91
 368                  3073,   //;52   92
 369                  3102,   //;53   93
 370                  3130,   //;54   94
 371                  3157,   //;55   95
 372                  3183,   //;56   96
 373                  3209,   //;57   97
 374                  3234,   //;58   98
 375                  3259,   //;59   99
 376                  3283,   //;60   100
 377                  3306,   //;61   101
 378                  3328,   //;62   102
 379                  3351,   //;63   103
 380                  3372,   //;64   104
 381                  3393,   //;65   105
 382                  3413,   //;66   106
 383                  3432,   //;67   107
 384                  3452,   //;68   108
 385                  3470,   //;69   109
 386                  3488,   //;70   110
 387                  3506,   //;71   111
 388                  3523,   //;72   112
 389                  3539,   //;73   113
 390                  3555,   //;74   114
 391                  3571,   //;75   115
 392                  3586,   //;76   116
 393                  3601,   //;77   117
 394                  3615,   //;78   118
 395                  3628,   //;79   119
 396                  3642,   //;80   120
 397                  3655,   //;81   121
 398                  3667,   //;82   122
 399                  3679,   //;83   123
 400                  3691,   //;84   124
 401                  3702,   //;85   125
 402                  3714,   //;86   126
 403                  3724,   //;87   127
 404                  3735,   //;88   128
 405                  3745,   //;89   129
 406                  3754,   //;90   130
 407                  3764,   //;91   131
 408                  3773,   //;92   132
 409                  3782,   //;93   133
 410                  3791,   //;94   134
 411                  3799,   //;95   135
 412                  3807,   //;96   136
 413                  3815,   //;97   137
 414                  3822,   //;98   138
 415                  3830,   //;99   139
 416                  3837,   //;100  140
 417                  3844,   //;101  141
 418                  3850,   //;102  142
 419                  3857,   //;103  143
 420                  3863,   //;104  144
 421                  3869,   //;105  145
 422                  3875,   //;106  146
 423                  3881,   //;107  147
 424                  3887,   //;108  148
 425                  3892,   //;109  149
 426                  3897,   //;110  150
 427                  3902,   //;111  151
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 8   

 428                  3907,   //;112  152
 429                  3912,   //;113  153
 430                  3917,   //;114  154
 431                  3921,   //;115  155
 432                  3926,   //;116  156
 433                  3930,   //;117  157
 434                  3934,   //;118  158
 435                  3938,   //;119  159
 436                  3942    //;120  160
 437          };
 438          
 439          /********************  计算温度 ***********************************************/
 440          // 计算结果: 0对应-40.0度, 400对应0度, 625对应25.0度, 最大1600对应120.0度. 
 441          // 为了通用, ADC输入为12bit的ADC值.
 442          // 电路和软件算法设计: Coody
 443          /**********************************************/
 444          
 445          #define     D_SCALE     10      //结果放大倍数, 放大10倍就是保留一位小数
 446          u16 get_temperature(u16 adc)
 447          {
 448   1          u16 code *p;
 449   1          u16 i;
 450   1          u8  j,k,min,max;
 451   1          
 452   1          adc = 4096 - adc;   //Rt接地
 453   1          p = temp_table;
 454   1          if(adc < p[0])      return (0xfffe);
 455   1          if(adc > p[160])    return (0xffff);
 456   1          
 457   1          min = 0;        //-40度
 458   1          max = 160;      //120度
 459   1      
 460   1          for(j=0; j<5; j++)  //对分查表
 461   1          {
 462   2              k = min / 2 + max / 2;
 463   2              if(adc <= p[k]) max = k;
 464   2              else            min = k;
 465   2          }
 466   1               if(adc == p[min])  i = min * D_SCALE;
 467   1          else if(adc == p[max])  i = max * D_SCALE;
 468   1          else    // min < temp < max
 469   1          {
 470   2              while(min <= max)
 471   2              {
 472   3                  min++;
 473   3                  if(adc == p[min])   {i = min * D_SCALE; break;}
 474   3                  else if(adc < p[min])
 475   3                  {
 476   4                      min--;
 477   4                      i = p[min]; //min
 478   4                      j = (adc - i) * D_SCALE / (p[min+1] - i);
 479   4                      i = min;
 480   4                      i *= D_SCALE;
 481   4                      i += j;
 482   4                      break;
 483   4                  }
 484   3              }
 485   2          }
 486   1          return i;
 487   1      }
 488          
 489          /********************** 显示扫描函数 ************************/
C51 COMPILER V9.59.0.0   NTC                                                               06/12/2020 17:45:04 PAGE 9   

 490          void DisplayScan(void)
 491          {   
 492   1          P7 = ~T_COM[7-display_index];
 493   1          P6 = ~t_display[LED8[display_index]];
 494   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 495   1      }
 496          
 497          
 498          /********************** Timer0 1ms中断函数 ************************/
 499          void timer0 (void) interrupt 1
 500          {
 501   1          DisplayScan();  //1ms扫描显示一位
 502   1          B_1ms = 1;      //1ms标志
 503   1      }
 504          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    820    ----
   CONSTANT SIZE    =    373    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
