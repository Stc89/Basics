C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.STCMCU.com -----------------------------------------*/
   9          /* --- Web: www.STCMCUDATA.com -------------------------------------*/
  10          /* --- QQ:  800003751 ----------------------------------------------*/
  11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序     */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明    **************
  15          
  16          本程序演示5个定时器的使用, 本例程均使用16位自动重装.
  17          
  18          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  19          
  20          定时器0做16位自动重装, 中断频率为1000HZ，中断函数从P6.7取反输出500HZ方波信号.
  21          
  22          定时器1做16位自动重装, 中断频率为2000HZ，中断函数从P6.6取反输出1000HZ方波信号.
  23          
  24          定时器2做16位自动重装, 中断频率为3000HZ，中断函数从P6.5取反输出1500HZ方波信号.
  25          
  26          定时器3做16位自动重装, 中断频率为4000HZ，中断函数从P6.4取反输出2000HZ方波信号.
  27          
  28          定时器4做16位自动重装, 中断频率为5000HZ，中断函数从P6.3取反输出2500HZ方波信号.
  29          
  30          ******************************************/
  31          
  32          #include "reg51.h"
  33          
  34          #define     MAIN_Fosc       24000000UL  //定义主时钟
  35          
  36          
  37          typedef     unsigned char   u8;
  38          typedef     unsigned int    u16;
  39          typedef     unsigned long   u32;
  40          
  41          sfr INT_CLKO = 0x8F;
  42          sfr AUXR = 0x8E;
  43          sfr IE2   = 0xAF;   //STC8H8K64U系列
  44          sfr T2H  = 0xD6;
  45          sfr T2L  = 0xD7;
  46          
  47          sfr T4T3M  = 0xD1;
  48          sfr T4H = 0xD2;
  49          sfr T4L = 0xD3;
  50          sfr T3H = 0xD4;
  51          sfr T3L = 0xD5;
  52          
  53          sfr P4   = 0xC0;
  54          sfr P5   = 0xC8;
  55          sfr P6   = 0xE8;
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 2   

  56          sfr P7   = 0xF8;
  57          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  58          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  59          sfr P0M1 = 0x93;
  60          sfr P0M0 = 0x94;
  61          sfr P2M1 = 0x95;
  62          sfr P2M0 = 0x96;
  63          sfr P3M1 = 0xB1;
  64          sfr P3M0 = 0xB2;
  65          sfr P4M1 = 0xB3;
  66          sfr P4M0 = 0xB4;
  67          sfr P5M1 = 0xC9;
  68          sfr P5M0 = 0xCA;
  69          sfr P6M1 = 0xCB;
  70          sfr P6M0 = 0xCC;
  71          sfr P7M1 = 0xE1;
  72          sfr P7M0 = 0xE2;
  73          
  74          sbit P00 = P0^0;
  75          sbit P01 = P0^1;
  76          sbit P02 = P0^2;
  77          sbit P03 = P0^3;
  78          sbit P04 = P0^4;
  79          sbit P05 = P0^5;
  80          sbit P06 = P0^6;
  81          sbit P07 = P0^7;
  82          sbit P10 = P1^0;
  83          sbit P11 = P1^1;
  84          sbit P12 = P1^2;
  85          sbit P13 = P1^3;
  86          sbit P14 = P1^4;
  87          sbit P15 = P1^5;
  88          sbit P16 = P1^6;
  89          sbit P17 = P1^7;
  90          sbit P20 = P2^0;
  91          sbit P21 = P2^1;
  92          sbit P22 = P2^2;
  93          sbit P23 = P2^3;
  94          sbit P24 = P2^4;
  95          sbit P25 = P2^5;
  96          sbit P26 = P2^6;
  97          sbit P27 = P2^7;
  98          sbit P30 = P3^0;
  99          sbit P31 = P3^1;
 100          sbit P32 = P3^2;
 101          sbit P33 = P3^3;
 102          sbit P34 = P3^4;
 103          sbit P35 = P3^5;
 104          sbit P36 = P3^6;
 105          sbit P37 = P3^7;
 106          sbit P40 = P4^0;
 107          sbit P41 = P4^1;
 108          sbit P42 = P4^2;
 109          sbit P43 = P4^3;
 110          sbit P44 = P4^4;
 111          sbit P45 = P4^5;
 112          sbit P46 = P4^6;
 113          sbit P47 = P4^7;
 114          sbit P50 = P5^0;
 115          sbit P51 = P5^1;
 116          sbit P52 = P5^2;
 117          sbit P53 = P5^3;
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 3   

 118          sbit P54 = P5^4;
 119          sbit P55 = P5^5;
 120          sbit P56 = P5^6;
 121          sbit P57 = P5^7;
 122          sbit P60 = P6^0;
 123          sbit P61 = P6^1;
 124          sbit P62 = P6^2;
 125          sbit P63 = P6^3;
 126          sbit P64 = P6^4;
 127          sbit P65 = P6^5;
 128          sbit P66 = P6^6;
 129          sbit P67 = P6^7;
 130          
 131          #define ET2 0x04
 132          #define ET3 0x20
 133          #define ET4 0x40
 134          
 135          #define Timer0_Reload   (MAIN_Fosc / 1000)      //Timer 0 中断频率, 1000次/秒
 136          #define Timer1_Reload   (MAIN_Fosc / 2000)      //Timer 1 中断频率, 2000次/秒
 137          #define Timer2_Reload   (MAIN_Fosc / 3000)      //Timer 2 中断频率, 3000次/秒
 138          #define Timer3_Reload   (MAIN_Fosc / 4000)      //Timer 3 中断频率, 4000次/秒
 139          #define Timer4_Reload   (MAIN_Fosc / 5000)      //Timer 4 中断频率, 5000次/秒
 140          
 141          void    Timer0_init(void);
 142          void    Timer1_init(void);
 143          void    Timer2_init(void);
 144          void    Timer3_init(void);
 145          void    Timer4_init(void);
 146          
 147          
 148          //========================================================================
 149          // 函数: void main(void)
 150          // 描述: 主函数.
 151          // 参数: none.
 152          // 返回: none.
 153          // 版本: V1.0, 2015-1-12
 154          //========================================================================
 155          void main(void)
 156          {
 157   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 158   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 159   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 160   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 161   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 162   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 163   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 164   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 165   1      
 166   1          EA = 1;     //打开总中断
 167   1          P40 = 0;    //打开LED电源
 168   1          
 169   1          Timer0_init();
 170   1          Timer1_init();
 171   1          Timer2_init();
 172   1          Timer3_init();
 173   1          Timer4_init();
 174   1      
 175   1          while (1)
 176   1          {
 177   2      
 178   2          }
 179   1      }
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 4   

 180          
 181          //========================================================================
 182          // 函数: void   Timer0_init(void)
 183          // 描述: timer0初始化函数.
 184          // 参数: none.
 185          // 返回: none.
 186          // 版本: V1.0, 2015-1-12
 187          //========================================================================
 188          void    Timer0_init(void)
 189          {
 190   1              TR0 = 0;    //停止计数
 191   1      
 192   1          #if (Timer0_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer0设置的中断过快!"
              
                  #elif ((Timer0_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 196   1              ET0 = 1;    //允许中断
 197   1          //  PT0 = 1;    //高优先级中断
 198   1              TMOD &= ~0x03;
 199   1              TMOD |= 0;  //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3: 16位自动重装, 不可屏
             -蔽中断
 200   1          //  TMOD |=  0x04;  //对外计数或分频
 201   1              TMOD &= ~0x04;  //定时
 202   1          //  INT_CLKO |=  0x01;  //输出时钟
 203   1              INT_CLKO &= ~0x01;  //不输出时钟
 204   1      
 205   1              #if (Timer0_Reload < 65536UL)
 206   1                  AUXR |=  0x80;  //1T mode
 207   1                  TH0 = (u8)((65536UL - Timer0_Reload) / 256);
 208   1                  TL0 = (u8)((65536UL - Timer0_Reload) % 256);
 209   1              #else
                          AUXR &= ~0x80;  //12T mode
                          TH0 = (u8)((65536UL - Timer0_Reload/12) / 256);
                          TL0 = (u8)((65536UL - Timer0_Reload/12) % 256);
                      #endif
 214   1      
 215   1              TR0 = 1;    //开始运行
 216   1      
 217   1          #else
                      #error "Timer0设置的中断过慢!"
                  #endif
 220   1      }
 221          
 222          //========================================================================
 223          // 函数: void   Timer1_init(void)
 224          // 描述: timer1初始化函数.
 225          // 参数: none.
 226          // 返回: none.
 227          // 版本: V1.0, 2015-1-12
 228          //========================================================================
 229          void    Timer1_init(void)
 230          {
 231   1              TR1 = 0;    //停止计数
 232   1      
 233   1          #if (Timer1_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer1设置的中断过快!"
              
                  #elif ((Timer1_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 237   1              ET1 = 1;    //允许中断
 238   1          //  PT1 = 1;    //高优先级中断
 239   1              TMOD &= ~0x30;
 240   1              TMOD |= (0 << 4);   //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 5   

 241   1          //  TMOD |=  0x40;  //对外计数或分频
 242   1              TMOD &= ~0x40;  //定时
 243   1          //  INT_CLKO |=  0x02;  //输出时钟
 244   1              INT_CLKO &= ~0x02;  //不输出时钟
 245   1      
 246   1              #if (Timer1_Reload < 65536UL)
 247   1                  AUXR |=  0x40;  //1T mode
 248   1                  TH1 = (u8)((65536UL - Timer1_Reload) / 256);
 249   1                  TL1 = (u8)((65536UL - Timer1_Reload) % 256);
 250   1              #else
                          AUXR &= ~0x40;  //12T mode
                          TH1 = (u8)((65536UL - Timer1_Reload/12) / 256);
                          TL1 = (u8)((65536UL - Timer1_Reload/12) % 256);
                      #endif
 255   1      
 256   1              TR1 = 1;    //开始运行
 257   1      
 258   1          #else
                      #error "Timer1设置的中断过慢!"
                  #endif
 261   1      }
 262          
 263          //========================================================================
 264          // 函数: void   Timer2_init(void)
 265          // 描述: timer2初始化函数.
 266          // 参数: none.
 267          // 返回: none.
 268          // 版本: V1.0, 2015-1-12
 269          //========================================================================
 270          void    Timer2_init(void)
 271          {
 272   1              AUXR &= ~0x1c;      //停止计数, 定时模式, 12T模式
 273   1      
 274   1          #if (Timer2_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer2设置的中断过快!"
              
                  #elif ((Timer2_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 278   1          //  IE2  &= ~ET2;       //禁止中断
 279   1              IE2  |=  ET2;       //允许中断
 280   1          //  INT_CLKO |=  0x04;  //输出时钟
 281   1              INT_CLKO &= ~0x04;  //不输出时钟
 282   1      
 283   1              #if (Timer2_Reload < 65536UL)
 284   1                  AUXR |=  (1<<2);    //1T mode
 285   1                  T2H = (u8)((65536UL - Timer2_Reload) / 256);
 286   1                  T2L = (u8)((65536UL - Timer2_Reload) % 256);
 287   1              #else
                          T2H = (u8)((65536UL - Timer2_Reload/12) / 256);
                          T2L = (u8)((65536UL - Timer2_Reload/12) % 256);
                      #endif
 291   1      
 292   1                  AUXR |=  (1<<4);    //开始运行
 293   1      
 294   1          #else
                      #error "Timer2设置的中断过慢!"
                  #endif
 297   1      }
 298          
 299          //========================================================================
 300          // 函数: void   Timer3_init(void)
 301          // 描述: timer3初始化函数.
 302          // 参数: none.
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 6   

 303          // 返回: none.
 304          // 版本: V1.0, 2015-1-12
 305          //========================================================================
 306          void    Timer3_init(void)
 307          {
 308   1              T4T3M &= ~0x0f;     //停止计数, 定时模式, 12T模式, 不输出时钟
 309   1      
 310   1          #if (Timer3_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer3设置的中断过快!"
              
                  #elif ((Timer3_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 314   1          //  IE2  &= ~ET3;       //禁止中断
 315   1              IE2  |=  ET3;       //允许中断
 316   1          //  T4T3M |=  0x01;     //输出时钟
 317   1          //  T4T3M &= ~0x01;     //不输出时钟
 318   1      
 319   1              #if (Timer3_Reload < 65536UL)
 320   1                  T4T3M |=  (1<<1);    //1T mode
 321   1                  T3H = (u8)((65536UL - Timer3_Reload) / 256);
 322   1                  T3L = (u8)((65536UL - Timer3_Reload) % 256);
 323   1              #else
                          T3H = (u8)((65536UL - Timer3_Reload/12) / 256);
                          T3L = (u8)((65536UL - Timer3_Reload/12) % 256);
                      #endif
 327   1      
 328   1                  T4T3M |=  (1<<3);    //开始运行
 329   1      
 330   1          #else
                      #error "Timer3设置的中断过慢!"
                  #endif
 333   1      }
 334          
 335          //========================================================================
 336          // 函数: void   Timer4_init(void)
 337          // 描述: timer4初始化函数.
 338          // 参数: none.
 339          // 返回: none.
 340          // 版本: V1.0, 2015-1-12
 341          //========================================================================
 342          void    Timer4_init(void)
 343          {
 344   1              T4T3M &= ~0xf0;     //停止计数, 定时模式, 12T模式, 不输出时钟
 345   1      
 346   1          #if (Timer4_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer4设置的中断过快!"
              
                  #elif ((Timer4_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 350   1          //  IE2  &= ~ET4;       //禁止中断
 351   1              IE2  |=  ET4;       //允许中断
 352   1          //  T4T3M |=  0x10;     //输出时钟
 353   1          //  T4T3M &= ~0x10;     //不输出时钟
 354   1      
 355   1              #if (Timer4_Reload < 65536UL)
 356   1                  T4T3M |=  (1<<5);    //1T mode
 357   1                  T4H = (u8)((65536UL - Timer4_Reload) / 256);
 358   1                  T4L = (u8)((65536UL - Timer4_Reload) % 256);
 359   1              #else
                          T4H = (u8)((65536UL - Timer4_Reload/12) / 256);
                          T4L = (u8)((65536UL - Timer4_Reload/12) % 256);
                      #endif
 363   1      
 364   1                  T4T3M |=  (1<<7);    //开始运行
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 7   

 365   1      
 366   1          #else
                      #error "Timer4设置的中断过慢!"
                  #endif
 369   1      }
 370          
 371          //========================================================================
 372          // 函数: void timer0_int (void) interrupt TIMER0_VECTOR
 373          // 描述:  timer0中断函数.
 374          // 参数: none.
 375          // 返回: none.
 376          // 版本: V1.0, 2015-1-12
 377          //========================================================================
 378          void timer0_int (void) interrupt 1
 379          {
 380   1         P67 = ~P67;
 381   1      }
 382          
 383          //========================================================================
 384          // 函数: void timer1_int (void) interrupt TIMER1_VECTOR
 385          // 描述:  timer1中断函数.
 386          // 参数: none.
 387          // 返回: none.
 388          // 版本: V1.0, 2015-1-12
 389          //========================================================================
 390          void timer1_int (void) interrupt 3
 391          {
 392   1         P66 = ~P66;
 393   1      }
 394          
 395          //========================================================================
 396          // 函数: void timer2_int (void) interrupt TIMER2_VECTOR
 397          // 描述:  timer2中断函数.
 398          // 参数: none.
 399          // 返回: none.
 400          // 版本: V1.0, 2015-1-12
 401          //========================================================================
 402          void timer2_int (void) interrupt 12
 403          {
 404   1          P65 = ~P65;
 405   1      }
 406          
 407          //========================================================================
 408          // 函数: void timer3_int (void) interrupt TIMER3_VECTOR
 409          // 描述:  timer3中断函数.
 410          // 参数: none.
 411          // 返回: none.
 412          // 版本: V1.0, 2015-1-12
 413          //========================================================================
 414          void timer3_int(void) interrupt 19
 415          {
 416   1          P64 = ~P64;
 417   1      }
 418          
 419          //========================================================================
 420          // 函数: void timer4_int (void) interrupt TIMER4_VECTOR
 421          // 描述:  timer4中断函数.
 422          // 参数: none.
 423          // 返回: none.
 424          // 版本: V1.0, 2015-1-12
 425          //========================================================================
 426          void timer4_int(void) interrupt 20
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 18:15:04 PAGE 8   

 427          {
 428   1          P63 = ~P63;
 429   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    179    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
