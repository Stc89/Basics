C51 COMPILER V9.59.0.0   MCLK                                                              07/31/2020 09:30:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCLK
OBJECT MODULE PLACED IN MCLK.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MCLK.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          程序使用P6口做跑马灯，演示系统时钟源切换效果。
  16          
  17          跑马灯每跑一轮切换一次时钟源，分别是默认IRC主频，主频48分频，内部32K IRC。
  18          
  19          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  20          
  21          ******************************************/
  22          
  23          #include    "reg51.h"
  24          
  25          #define     MAIN_Fosc       24000000L   //定义主时钟
  26          
  27          typedef     unsigned char   u8;
  28          typedef     unsigned int    u16;
  29          typedef     unsigned long   u32;
  30          
  31          sfr P4   = 0xC0;
  32          sfr P5   = 0xC8;
  33          sfr P6   = 0xE8;
  34          sfr P7   = 0xF8;
  35          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  36          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  37          sfr P0M1 = 0x93;
  38          sfr P0M0 = 0x94;
  39          sfr P2M1 = 0x95;
  40          sfr P2M0 = 0x96;
  41          sfr P3M1 = 0xB1;
  42          sfr P3M0 = 0xB2;
  43          sfr P4M1 = 0xB3;
  44          sfr P4M0 = 0xB4;
  45          sfr P5M1 = 0xC9;
  46          sfr P5M0 = 0xCA;
  47          sfr P6M1 = 0xCB;
  48          sfr P6M0 = 0xCC;
  49          sfr P7M1 = 0xE1;
  50          sfr P7M0 = 0xE2;
  51          
  52          sbit P00 = P0^0;
  53          sbit P01 = P0^1;
  54          sbit P02 = P0^2;
  55          sbit P03 = P0^3;
C51 COMPILER V9.59.0.0   MCLK                                                              07/31/2020 09:30:38 PAGE 2   

  56          sbit P04 = P0^4;
  57          sbit P05 = P0^5;
  58          sbit P06 = P0^6;
  59          sbit P07 = P0^7;
  60          sbit P10 = P1^0;
  61          sbit P11 = P1^1;
  62          sbit P12 = P1^2;
  63          sbit P13 = P1^3;
  64          sbit P14 = P1^4;
  65          sbit P15 = P1^5;
  66          sbit P16 = P1^6;
  67          sbit P17 = P1^7;
  68          sbit P20 = P2^0;
  69          sbit P21 = P2^1;
  70          sbit P22 = P2^2;
  71          sbit P23 = P2^3;
  72          sbit P24 = P2^4;
  73          sbit P25 = P2^5;
  74          sbit P26 = P2^6;
  75          sbit P27 = P2^7;
  76          sbit P30 = P3^0;
  77          sbit P31 = P3^1;
  78          sbit P32 = P3^2;
  79          sbit P33 = P3^3;
  80          sbit P34 = P3^4;
  81          sbit P35 = P3^5;
  82          sbit P36 = P3^6;
  83          sbit P37 = P3^7;
  84          sbit P40 = P4^0;
  85          sbit P41 = P4^1;
  86          sbit P42 = P4^2;
  87          sbit P43 = P4^3;
  88          sbit P44 = P4^4;
  89          sbit P45 = P4^5;
  90          sbit P46 = P4^6;
  91          sbit P47 = P4^7;
  92          sbit P50 = P5^0;
  93          sbit P51 = P5^1;
  94          sbit P52 = P5^2;
  95          sbit P53 = P5^3;
  96          sbit P54 = P5^4;
  97          sbit P55 = P5^5;
  98          sbit P56 = P5^6;
  99          sbit P57 = P5^7;
 100          
 101          sfr P_SW2 = 0xba;
 102          
 103          #define CKSEL (*(unsigned char volatile xdata *)0xfe00)
 104          #define CLKDIV (*(unsigned char volatile xdata *)0xfe01)
 105          #define HIRCCR (*(unsigned char volatile xdata *)0xfe02)
 106          #define XOSCCR (*(unsigned char volatile xdata *)0xfe03)
 107          #define IRC32KCR (*(unsigned char volatile xdata *)0xfe04)
 108          
 109          u8 ledIndex;
 110          u8 code ledNum[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
 111          u8 mode = 1;
 112          
 113          void  delay_ms(u8 ms);
 114          void  MCLK_Sel(void);
 115          
 116          /******************** 主函数 **************************/
 117          void main(void)
C51 COMPILER V9.59.0.0   MCLK                                                              07/31/2020 09:30:38 PAGE 3   

 118          {
 119   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 120   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 121   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 122   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 123   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 124   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 125   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 126   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 127   1      
 128   1          P40 = 0;    //LED Power On
 129   1          ledIndex = 0;
 130   1          while(1)
 131   1          {
 132   2              P6 = ~ledNum[ledIndex]; //输出低驱动
 133   2              ledIndex++;
 134   2              if(ledIndex > 7)
 135   2              {
 136   3                  ledIndex = 0;
 137   3                  MCLK_Sel();
 138   3              }
 139   2              delay_ms(10);
 140   2          }
 141   1      }
 142          
 143          //========================================================================
 144          // 函数: void  MCLK_Sel(void)
 145          // 描述: 系统时钟设置函数。
 146          // 参数: none.
 147          // 返回: none.
 148          // 版本: VER1.0
 149          // 日期: 2020-7-29
 150          // 备注: 
 151          //========================================================================
 152          void  MCLK_Sel(void)
 153          {
 154   1          if(mode == 0)
 155   1          {
 156   2              mode++;
 157   2              P_SW2 = 0x80;
 158   2              HIRCCR = 0x80; //启动内部 IRC
 159   2              while (!(HIRCCR & 1)); //等待时钟稳定
 160   2              CLKDIV = 0;
 161   2              CKSEL = 0x00; //选择内部 IRC ( 默认 )
 162   2              P_SW2 = 0x00;
 163   2          }
 164   1          else if(mode == 1)
 165   1          {
 166   2              mode++;
 167   2              P_SW2 = 0x80;
 168   2              HIRCCR = 0x80; //启动内部 IRC
 169   2              while (!(HIRCCR & 1)); //等待时钟稳定
 170   2              CLKDIV = 48;   //MCLK/48
 171   2              CKSEL = 0x00; //选择内部 IRC ( 默认 )
 172   2              P_SW2 = 0x00;
 173   2          }
 174   1      //    else if(mode == 2)
 175   1      //    {
 176   1      //        mode++;
 177   1      //        P_SW2 = 0x80;
 178   1      //        XOSCCR = 0xc0; //启动外部晶振
 179   1      //        while (!(XOSCCR & 1)); //等待时钟稳定
C51 COMPILER V9.59.0.0   MCLK                                                              07/31/2020 09:30:38 PAGE 4   

 180   1      //        CLKDIV = 0x00; //时钟不分频
 181   1      //        CKSEL = 0x01; //选择外部晶振
 182   1      //        P_SW2 = 0x00;
 183   1      //    }
 184   1          else
 185   1          {
 186   2              mode = 0;
 187   2              P_SW2 = 0x80;
 188   2              IRC32KCR = 0x80; //启动内部 32K IRC
 189   2              while (!(IRC32KCR & 1)); //等待时钟稳定
 190   2              CLKDIV = 0x00; //时钟不分频
 191   2              CKSEL = 0x03; //选择内部 32K
 192   2              P_SW2 = 0x00;
 193   2          }
 194   1      }
 195          
 196          //========================================================================
 197          // 函数: void  delay_ms(u8 ms)
 198          // 描述: 延时函数。
 199          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 200          // 返回: none.
 201          // 版本: VER1.0
 202          // 日期: 2013-4-1
 203          // 备注: 
 204          //========================================================================
 205          void  delay_ms(u8 ms)
 206          {
 207   1          u16 i;
 208   1          do{
 209   2              i = MAIN_Fosc / 13000;
 210   2              while(--i)    ;   //14T per loop
 211   2          }while(--ms);
 212   1      }
 213          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
