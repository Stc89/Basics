C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2C_SLAVE_INT
OBJECT MODULE PLACED IN I2C_Slave_INT.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C_Slave_INT.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 -----------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          内部集成I2C串行总线控制器做从机模式，SCL->P3.2, SDA->P3.3;
  17          IO口模拟I2C做主机模式，SCL->P0.0, SDA->P0.1;
  18          通过外部飞线连接 P0.0->P3.2, P0.1->P3.3，实现I2C自发自收功能。
  19          
  20          用STC的MCU的IO方式驱动8位数码管。
  21          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  22          计数器每秒钟加1, 计数范围为0~9999.
  23          
  24          显示效果为: 上电后主机每秒钟发送一次计数数据，并在左边4个数码管上显示发送内容；从机接收到数据后在右边4个数
             -码管显示。
  25          
  26          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  27          
  28          ******************************************/
  29          
  30          
  31          #include "reg51.h"
  32          #include "intrins.h"
  33          
  34          #define MAIN_Fosc       24000000L   //定义主时钟
  35          
  36          typedef     unsigned char   u8;
  37          typedef     unsigned int    u16;
  38          typedef     unsigned long   u32;
  39          
  40          sfr P_SW2 = 0xba;
  41          sfr AUXR = 0x8E;
  42          
  43          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  44          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  45          sfr P0M1 = 0x93;
  46          sfr P0M0 = 0x94;
  47          sfr P2M1 = 0x95;
  48          sfr P2M0 = 0x96;
  49          sfr P3M1 = 0xB1;
  50          sfr P3M0 = 0xB2;
  51          sfr P4M1 = 0xB3;
  52          sfr P4M0 = 0xB4;
  53          sfr P5M1 = 0xC9;
  54          sfr P5M0 = 0xCA;
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 2   

  55          sfr P6M1 = 0xCB;
  56          sfr P6M0 = 0xCC;
  57          sfr P7M1 = 0xE1;
  58          sfr P7M0 = 0xE2;
  59          sfr P6   = 0xE8;
  60          sfr P7   = 0xF8;
  61          
  62          #define I2CCFG          (*(unsigned char volatile xdata *)0xfe80)
  63          #define I2CMSCR         (*(unsigned char volatile xdata *)0xfe81)
  64          #define I2CMSST         (*(unsigned char volatile xdata *)0xfe82)
  65          #define I2CSLCR         (*(unsigned char volatile xdata *)0xfe83)
  66          #define I2CSLST         (*(unsigned char volatile xdata *)0xfe84)
  67          #define I2CSLADR        (*(unsigned char volatile xdata *)0xfe85)
  68          #define I2CTXD          (*(unsigned char volatile xdata *)0xfe86)
  69          #define I2CRXD          (*(unsigned char volatile xdata *)0xfe87)
  70          #define I2CMSAUX        (*(unsigned char volatile xdata *)0xfe88)
  71          
  72          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
  73          
  74          #define DIS_DOT     0x20
  75          #define DIS_BLACK   0x10
  76          #define DIS_        0x11
  77          
  78          /*************  本地常量声明    **************/
  79          u8 code t_display[]={                       //标准字库
  80          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  81              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  82          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  83              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  84              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  85          
  86          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
  87          
  88          /*************  本地变量声明    **************/
  89          
  90          u8  LED8[8];        //显示缓冲
  91          u8  display_index;  //显示位索引
  92          
  93          bit isda;                                       //设备地址标志
  94          bit isma;                                       //存储地址标志
  95          bit B_1ms;          //1ms标志
  96          bit DisplayFlag;
  97          u8 addr;
  98          u8 pdata buffer[256];
  99          u16 msecond;
 100          u16 Test_cnt;   //测试用的秒计数变量
 101          u8  tmp[4];     //通用数组
 102          
 103          void Timer0_config(void);
 104          void WriteNbyte(u8 addr, u8 *p, u8 number);
 105          void ReadNbyte(u8 addr, u8 *p, u8 number);
 106          
 107          void I2C_Isr() interrupt 24
 108          {
 109   1          char store;
 110   1          
 111   1          store = P_SW2;
 112   1          P_SW2 |= 0x80;
 113   1      
 114   1          if (I2CSLST & 0x40)
 115   1          {
 116   2              I2CSLST &= ~0x40;                       //处理START事件
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 3   

 117   2          }
 118   1          else if (I2CSLST & 0x20)
 119   1          {
 120   2              I2CSLST &= ~0x20;                       //处理RECV事件，SLACKO设置为0
 121   2              if (isda)
 122   2              {
 123   3                  isda = 0;                           //处理RECV事件（RECV DEVICE ADDR）
 124   3              }
 125   2              else if (isma)
 126   2              {
 127   3                  isma = 0;                           //处理RECV事件（RECV MEMORY ADDR）
 128   3                  addr = I2CRXD;
 129   3                  I2CTXD = buffer[addr];
 130   3              }
 131   2              else
 132   2              {
 133   3                  buffer[addr++] = I2CRXD;            //处理RECV事件（RECV DATA）
 134   3              }
 135   2          }
 136   1          else if (I2CSLST & 0x10)
 137   1          {
 138   2              I2CSLST &= ~0x10;                       //处理SEND事件
 139   2              if (I2CSLST & 0x02)
 140   2              {
 141   3                  I2CTXD = 0xff;
 142   3              }
 143   2              else
 144   2              {
 145   3                  I2CTXD = buffer[++addr];
 146   3              }
 147   2          }
 148   1          else if (I2CSLST & 0x08)
 149   1          {
 150   2              I2CSLST &= ~0x08;                       //处理STOP事件
 151   2              isda = 1;
 152   2              isma = 1;
 153   2              DisplayFlag = 1;
 154   2          }
 155   1      
 156   1          P_SW2 = store;
 157   1      }
 158          
 159          void main()
 160          {
 161   1          u8  i;
 162   1      
 163   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 164   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 165   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 166   1          P3M1 = 0x04;   P3M0 = 0x00;   //SCL设置为输入口，SDA设置为准双向口
 167   1      
 168   1          P_SW2 = 0x80;
 169   1          P_SW2 |= 0x30;   //I2C功能脚选择，00:P1.5,P1.4; 01:P2.5,P2.4; 11:P3.2,P3.3
 170   1      
 171   1          I2CCFG = 0x80;                              //使能I2C从机模式
 172   1          I2CSLADR = 0x5a;                            //设置从机设备地址为5A
 173   1          I2CSLST = 0x00;
 174   1          I2CSLCR = 0x78;                             //使能从机模式中断
 175   1      
 176   1          Timer0_config();
 177   1          display_index = 0;
 178   1          DisplayFlag = 0;
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 4   

 179   1          EA = 1;
 180   1      
 181   1          isda = 1;                                   //用户变量初始化
 182   1          isma = 1;
 183   1          addr = 0;
 184   1          I2CTXD = buffer[addr];
 185   1      
 186   1          for(i=0; i<8; i++)  LED8[i] = DIS_; //上电全部显示-
 187   1          
 188   1          while (1)
 189   1          {
 190   2            if(DisplayFlag)
 191   2            {
 192   3              DisplayFlag = 0;
 193   3              LED8[4] = buffer[0];
 194   3              LED8[5] = buffer[1];
 195   3              LED8[6] = buffer[2];
 196   3              LED8[7] = buffer[3];
 197   3            }
 198   2            
 199   2            if(B_1ms)
 200   2            {
 201   3              B_1ms = 0;
 202   3              
 203   3              if(++msecond >= 1000)   //1秒到
 204   3              {
 205   4                  msecond = 0;        //清1000ms计数
 206   4                  Test_cnt++;         //秒计数+1
 207   4                  if(Test_cnt >= 10000)    Test_cnt = 0;   //秒计数范围为0~9999
 208   4      
 209   4                  tmp[0] = Test_cnt / 1000;
 210   4                  tmp[1] = (Test_cnt % 1000) / 100;
 211   4                  tmp[2] = (Test_cnt % 100) / 10;
 212   4                  tmp[3] = Test_cnt % 10;
 213   4                  LED8[0] = tmp[0];
 214   4                  LED8[1] = tmp[1];
 215   4                  LED8[2] = tmp[2];
 216   4                  LED8[3] = tmp[3];
 217   4      
 218   4                  WriteNbyte(0, tmp, 4);
 219   4               }
 220   3            }
 221   2          }
 222   1      }
 223          
 224          //========================================================================
 225          // 函数: void Timer0_config(void)
 226          // 描述: Timer0初始化函数。
 227          // 参数: 无.
 228          // 返回: 无.
 229          // 版本: V1.0, 2020-6-10
 230          //========================================================================
 231          void Timer0_config(void)
 232          {
 233   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 234   1          TH0 = (u8)(Timer0_Reload / 256);
 235   1          TL0 = (u8)(Timer0_Reload % 256);
 236   1          ET0 = 1;    //Timer0 interrupt enable
 237   1          TR0 = 1;    //Tiner0 run
 238   1      }
 239          
 240          /********************** 显示扫描函数 ************************/
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 5   

 241          void DisplayScan(void)
 242          {   
 243   1          P7 = ~T_COM[7-display_index];
 244   1          P6 = ~t_display[LED8[display_index]];
 245   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 246   1      }
 247          
 248          /********************** Timer0 1ms中断函数 ************************/
 249          void timer0 (void) interrupt 1
 250          {
 251   1          DisplayScan();  //1ms扫描显示一位
 252   1          B_1ms = 1;      //1ms标志
 253   1      }
 254          
 255          
 256          #define SLAW    0x5A
 257          #define SLAR    0x5B
 258          
 259          sbit    SDA = P0^1; //定义SDA
 260          sbit    SCL = P0^0; //定义SCL
 261          
 262          /****************************/
 263          void    I2C_Delay(void) //for normal MCS51, delay (2 * dly + 4) T, for STC12Cxxxx delay (4 * dly + 10) T
 264          {
 265   1          u8  dly;
 266   1          dly = MAIN_Fosc / 2000000UL;        //按2us计算
 267   1          while(--dly)    ;
 268   1      }
 269          
 270          /****************************/
 271          void I2C_Start(void)               //start the I2C, SDA High-to-low when SCL is high
 272          {
 273   1          SDA = 1;
 274   1          I2C_Delay();
 275   1          SCL = 1;
 276   1          I2C_Delay();
 277   1          SDA = 0;
 278   1          I2C_Delay();
 279   1          SCL = 0;
 280   1          I2C_Delay();
 281   1      }       
 282          
 283          
 284          void I2C_Stop(void)                 //STOP the I2C, SDA Low-to-high when SCL is high
 285          {
 286   1          SDA = 0;
 287   1          I2C_Delay();
 288   1          SCL = 1;
 289   1          I2C_Delay();
 290   1          SDA = 1;
 291   1          I2C_Delay();
 292   1      }
 293          
 294          void S_ACK(void)              //Send ACK (LOW)
 295          {
 296   1          SDA = 0;
 297   1          I2C_Delay();
 298   1          SCL = 1;
 299   1          I2C_Delay();
 300   1          SCL = 0;
 301   1          I2C_Delay();
 302   1      }
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 6   

 303          
 304          void S_NoACK(void)           //Send No ACK (High)
 305          {
 306   1          SDA = 1;
 307   1          I2C_Delay();
 308   1          SCL = 1;
 309   1          I2C_Delay();
 310   1          SCL = 0;
 311   1          I2C_Delay();
 312   1      }
 313                  
 314          void I2C_Check_ACK(void)         //Check ACK, If F0=0, then right, if F0=1, then error
 315          {
 316   1          SDA = 1;
 317   1          I2C_Delay();
 318   1          SCL = 1;
 319   1          I2C_Delay();
 320   1          F0  = SDA;
 321   1          SCL = 0;
 322   1          I2C_Delay();
 323   1      }
 324          
 325          /****************************/
 326          void I2C_WriteAbyte(u8 dat)     //write a byte to I2C
 327          {
 328   1          u8 i;
 329   1          i = 8;
 330   1          do
 331   1          {
 332   2              if(dat & 0x80)  SDA = 1;
 333   2              else            SDA = 0;
 334   2              dat <<= 1;
 335   2              I2C_Delay();
 336   2              SCL = 1;
 337   2              I2C_Delay();
 338   2              SCL = 0;
 339   2              I2C_Delay();
 340   2          }
 341   1          while(--i);
 342   1      }
 343          
 344          /****************************/
 345          u8 I2C_ReadAbyte(void)          //read A byte from I2C
 346          {
 347   1          u8 i,dat;
 348   1          i = 8;
 349   1          SDA = 1;
 350   1          do
 351   1          {
 352   2              SCL = 1;
 353   2              I2C_Delay();
 354   2              dat <<= 1;
 355   2              if(SDA)     dat++;
 356   2              SCL  = 0;
 357   2              I2C_Delay();
 358   2          }
 359   1          while(--i);
 360   1          return(dat);
 361   1      }
 362          
 363          /****************************/
 364          void WriteNbyte(u8 addr, u8 *p, u8 number)          /*  WordAddress,First Data Address,Byte lenth   */
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 7   

 365                                                                      //F0=0,right, F0=1,error
 366          {
 367   1          I2C_Start();
 368   1          I2C_WriteAbyte(SLAW);
 369   1          I2C_Check_ACK();
 370   1          if(!F0)
 371   1          {
 372   2              I2C_WriteAbyte(addr);
 373   2              I2C_Check_ACK();
 374   2              if(!F0)
 375   2              {
 376   3                  do
 377   3                  {
 378   4                      I2C_WriteAbyte(*p);     p++;
 379   4                      I2C_Check_ACK();
 380   4                      if(F0)  break;
 381   4                  }
 382   3                  while(--number);
 383   3              }
 384   2          }
 385   1          I2C_Stop();
 386   1      }
 387          
 388          
 389          /****************************/
 390          void ReadNbyte(u8 addr, u8 *p, u8 number)       /*  WordAddress,First Data Address,Byte lenth   */
 391          {
 392   1          I2C_Start();
 393   1          I2C_WriteAbyte(SLAW);
 394   1          I2C_Check_ACK();
 395   1          if(!F0)
 396   1          {
 397   2              I2C_WriteAbyte(addr);
 398   2              I2C_Check_ACK();
 399   2              if(!F0)
 400   2              {
 401   3                  I2C_Start();
 402   3                  I2C_WriteAbyte(SLAR);
 403   3                  I2C_Check_ACK();
 404   3                  if(!F0)
 405   3                  {
 406   4                      do
 407   4                      {
 408   5                          *p = I2C_ReadAbyte();   p++;
 409   5                          if(number != 1)     S_ACK();    //send ACK
 410   5                      }
 411   4                      while(--number);
 412   4                      S_NoACK();          //send no ACK
 413   4                  }
 414   3              }
 415   2          }
 416   1          I2C_Stop();
 417   1      }
 418          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    774    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =    256    ----
   DATA SIZE        =     18      10
C51 COMPILER V9.59.0.0   I2C_SLAVE_INT                                                     06/17/2020 10:27:06 PAGE 8   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
