C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IO_KEYSCAN
OBJECT MODULE PLACED IN IO_KeyScan.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IO_KeyScan.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 -----------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          用STC的MCU的IO方式驱动8位数码管。
  17          
  18          显示效果为: 数码时钟.
  19          
  20          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  21          
  22          左边4位LED显示时间(小时,分钟), 右边最后两位显示按键值.
  23          
  24          行列扫描按键键码为17~32.
  25          
  26          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  27          
  28          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  29          
  30          调整时间键:
  31          键码17: 小时+.
  32          键码18: 小时-.
  33          键码19: 分钟+.
  34          键码20: 分钟-.
  35          
  36          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  37          
  38          ******************************************/
  39          
  40          #include    "reg51.h"
  41          #include    "intrins.h"
  42          
  43          #define     MAIN_Fosc       24000000L   //定义主时钟
  44          
  45          typedef     unsigned char   u8;
  46          typedef     unsigned int    u16;
  47          typedef     unsigned long   u32;
  48          
  49          sfr TH2  = 0xD6;
  50          sfr TL2  = 0xD7;
  51          sfr IE2   = 0xAF;
  52          sfr INT_CLKO = 0x8F;
  53          sfr AUXR = 0x8E;
  54          sfr AUXR1 = 0xA2;
  55          sfr P_SW1 = 0xA2;
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 2   

  56          sfr P_SW2 = 0xBA;
  57          sfr S2CON = 0x9A;
  58          sfr S2BUF = 0x9B;
  59          
  60          sfr P4   = 0xC0;
  61          sfr P5   = 0xC8;
  62          sfr P6   = 0xE8;
  63          sfr P7   = 0xF8;
  64          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  65          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  66          sfr P0M1 = 0x93;
  67          sfr P0M0 = 0x94;
  68          sfr P2M1 = 0x95;
  69          sfr P2M0 = 0x96;
  70          sfr P3M1 = 0xB1;
  71          sfr P3M0 = 0xB2;
  72          sfr P4M1 = 0xB3;
  73          sfr P4M0 = 0xB4;
  74          sfr P5M1 = 0xC9;
  75          sfr P5M0 = 0xCA;
  76          sfr P6M1 = 0xCB;
  77          sfr P6M0 = 0xCC;
  78          sfr P7M1 = 0xE1;
  79          sfr P7M0 = 0xE2;
  80          
  81          sbit P00 = P0^0;
  82          sbit P01 = P0^1;
  83          sbit P02 = P0^2;
  84          sbit P03 = P0^3;
  85          sbit P04 = P0^4;
  86          sbit P05 = P0^5;
  87          sbit P06 = P0^6;
  88          sbit P07 = P0^7;
  89          sbit P10 = P1^0;
  90          sbit P11 = P1^1;
  91          sbit P12 = P1^2;
  92          sbit P13 = P1^3;
  93          sbit P14 = P1^4;
  94          sbit P15 = P1^5;
  95          sbit P16 = P1^6;
  96          sbit P17 = P1^7;
  97          sbit P20 = P2^0;
  98          sbit P21 = P2^1;
  99          sbit P22 = P2^2;
 100          sbit P23 = P2^3;
 101          sbit P24 = P2^4;
 102          sbit P25 = P2^5;
 103          sbit P26 = P2^6;
 104          sbit P27 = P2^7;
 105          sbit P30 = P3^0;
 106          sbit P31 = P3^1;
 107          sbit P32 = P3^2;
 108          sbit P33 = P3^3;
 109          sbit P34 = P3^4;
 110          sbit P35 = P3^5;
 111          sbit P36 = P3^6;
 112          sbit P37 = P3^7;
 113          sbit P40 = P4^0;
 114          sbit P41 = P4^1;
 115          sbit P42 = P4^2;
 116          sbit P43 = P4^3;
 117          sbit P44 = P4^4;
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 3   

 118          sbit P45 = P4^5;
 119          sbit P46 = P4^6;
 120          sbit P47 = P4^7;
 121          sbit P50 = P5^0;
 122          sbit P51 = P5^1;
 123          sbit P52 = P5^2;
 124          sbit P53 = P5^3;
 125          sbit P54 = P5^4;
 126          sbit P55 = P5^5;
 127          sbit P56 = P5^6;
 128          sbit P57 = P5^7;
 129          
 130          
 131          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))       //Timer 0 中断频率, 1000次/秒
 132          
 133          #define DIS_DOT     0x20
 134          #define DIS_BLACK   0x10
 135          #define DIS_        0x11
 136          
 137          
 138          u8 code t_display[]={                       //标准字库
 139          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 140              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 141          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 142              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 143              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 144          
 145          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 146          
 147          
 148          u8  LED8[8];        //显示缓冲
 149          u8  display_index;  //显示位索引
 150          bit B_1ms;          //1ms标志
 151          
 152          u8  KeyCode;    //给用户使用的键码, 1~16有效
 153          u8  cnt10ms;
 154          
 155          u8 IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;    //行列键盘变量
 156          u8  cnt50ms;
 157          
 158          u8  hour,minute,second; //RTC变量
 159          u16 msecond;
 160          
 161          void IO_KeyScan(void);   //50ms call
 162          
 163          
 164          /********************** 显示时钟函数 ************************/
 165          void DisplayRTC(void)
 166          {
 167   1          if(hour >= 10)  LED8[0] = hour / 10;
 168   1          else            LED8[0] = DIS_BLACK;
 169   1          LED8[1] = hour % 10;
 170   1          LED8[2] = minute / 10;
 171   1          LED8[3] = minute % 10;
 172   1          if(msecond >= 500)      LED8[1] |= DIS_DOT; //小时后的小数点做秒闪
 173   1      }
 174          
 175          /********************** RTC演示函数 ************************/
 176          void RTC(void)
 177          {
 178   1          if(++second >= 60)
 179   1          {
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 4   

 180   2              second = 0;
 181   2              if(++minute >= 60)
 182   2              {
 183   3                  minute = 0;
 184   3                  if(++hour >= 24)    hour = 0;
 185   3              }
 186   2          }
 187   1      }
 188          
 189          /**********************************************/
 190          void main(void)
 191          {
 192   1          u8  i;
 193   1          
 194   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 195   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 196   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 197   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 198   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 199   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 200   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 201   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 202   1      
 203   1          display_index = 0;
 204   1          
 205   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 206   1          TH0 = (u8)(Timer0_Reload / 256);
 207   1          TL0 = (u8)(Timer0_Reload % 256);
 208   1          ET0 = 1;    //Timer0 interrupt enable
 209   1          TR0 = 1;    //Tiner0 run
 210   1          EA = 1;     //打开总中断
 211   1          
 212   1          for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 213   1      
 214   1          hour   = 12;    //初始化时间值
 215   1          minute = 0;
 216   1          second = 0;
 217   1          DisplayRTC();
 218   1      
 219   1          KeyCode = 0;    //给用户使用的键码, 1~16有效
 220   1          cnt10ms = 0;
 221   1      
 222   1          IO_KeyState = 0;
 223   1          IO_KeyState1 = 0;
 224   1          IO_KeyHoldCnt = 0;
 225   1          cnt50ms = 0;
 226   1          
 227   1          while(1)
 228   1          {
 229   2              if(B_1ms)   //1ms到
 230   2              {
 231   3                  B_1ms = 0;
 232   3                  if(++msecond >= 1000)   //1秒到
 233   3                  {
 234   4                      msecond = 0;
 235   4                      RTC();
 236   4                      DisplayRTC();
 237   4                  }
 238   3                  if(msecond == 500)  DisplayRTC();   //小时后的小数点做秒闪
 239   3      
 240   3      
 241   3                  if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 5   

 242   3                  {
 243   4                      cnt50ms = 0;
 244   4                      IO_KeyScan();
 245   4                  }
 246   3                  
 247   3                  if(KeyCode > 0)     //有键按下
 248   3                  {
 249   4                      LED8[6] = KeyCode / 10; //显示键码
 250   4                      LED8[7] = KeyCode % 10; //显示键码
 251   4      
 252   4                      if(KeyCode == 17)   //hour +1
 253   4                      {
 254   5                          if(++hour >= 24)    hour = 0;
 255   5                          DisplayRTC();
 256   5                      }
 257   4                      if(KeyCode == 18)   //hour -1
 258   4                      {
 259   5                          if(--hour >= 24)    hour = 23;
 260   5                          DisplayRTC();
 261   5                      }
 262   4                      if(KeyCode == 19)   //minute +1
 263   4                      {
 264   5                          second = 0;
 265   5                          if(++minute >= 60)  minute = 0;
 266   5                          DisplayRTC();
 267   5                      }
 268   4                      if(KeyCode == 20)   //minute -1
 269   4                      {
 270   5                          second = 0;
 271   5                          if(--minute >= 60)  minute = 59;
 272   5                          DisplayRTC();
 273   5                      }
 274   4                      KeyCode = 0;
 275   4                  }
 276   3              }
 277   2          }
 278   1      } 
 279          /**********************************************/
 280          
 281          
 282          /*****************************************************
 283              行列键扫描程序
 284              使用XY查找4x4键的方法，只能单键，速度快
 285          
 286             Y     P04      P05      P06      P07
 287                    |        |        |        |
 288          X         |        |        |        |
 289          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 290                    |        |        |        |
 291          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 292                    |        |        |        |
 293          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 294                    |        |        |        |
 295          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 296                    |        |        |        |
 297          ******************************************************/
 298          
 299          
 300          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
 301          
 302          void IO_KeyDelay(void)
 303          {
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 6   

 304   1          u8 i;
 305   1          i = 60;
 306   1          while(--i)  ;
 307   1      }
 308          
 309          void IO_KeyScan(void)    //50ms call
 310          {
 311   1          u8  j;
 312   1      
 313   1          j = IO_KeyState1;   //保存上一次状态
 314   1      
 315   1          P0 = 0xf0;  //X低，读Y
 316   1          IO_KeyDelay();
 317   1          IO_KeyState1 = P0 & 0xf0;
 318   1      
 319   1          P0 = 0x0f;  //Y低，读X
 320   1          IO_KeyDelay();
 321   1          IO_KeyState1 |= (P0 & 0x0f);
 322   1          IO_KeyState1 ^= 0xff;   //取反
 323   1          
 324   1          if(j == IO_KeyState1)   //连续两次读相等
 325   1          {
 326   2              j = IO_KeyState;
 327   2              IO_KeyState = IO_KeyState1;
 328   2              if(IO_KeyState != 0)    //有键按下
 329   2              {
 330   3                  F0 = 0;
 331   3                  if(j == 0)  F0 = 1; //第一次按下
 332   3                  else if(j == IO_KeyState)
 333   3                  {
 334   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 335   4                      {
 336   5                          IO_KeyHoldCnt = 18;
 337   5                          F0 = 1;
 338   5                      }
 339   4                  }
 340   3                  if(F0)
 341   3                  {
 342   4                      j = T_KeyTable[IO_KeyState >> 4];
 343   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 344   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 345   4                  }
 346   3              }
 347   2              else    IO_KeyHoldCnt = 0;
 348   2          }
 349   1          P0 = 0xff;
 350   1      }
 351          
 352          
 353          /********************** 显示扫描函数 ************************/
 354          void DisplayScan(void)
 355          {   
 356   1          P7 = ~T_COM[7-display_index];
 357   1          P6 = ~t_display[LED8[display_index]];
 358   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 359   1      }
 360          
 361          
 362          /********************** Timer0 1ms中断函数 ************************/
 363          void timer0 (void) interrupt 1
 364          {
 365   1          DisplayScan();  //1ms扫描显示一位
C51 COMPILER V9.59.0.0   IO_KEYSCAN                                                        06/12/2020 17:38:52 PAGE 7   

 366   1          B_1ms = 1;      //1ms标志
 367   1      }
 368          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    626    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
