C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU International Limited -------------------------------*/
   3          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com -------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序     */
  11          /*------------------------------------------------------------------*/
  12          
  13          /*************  功能说明    **************
  14          
  15          定时器0做16位自动重装, 中断频率为1000HZ，作为数码管扫描显示.
  16          
  17          定时器1做16位自动重装, 中断频率为10000HZ，作为脉冲信号宽度检测.
  18          
  19          用STC的MCU的IO方式驱动8位数码管。
  20          
  21          P33口产生低电平(用户可自定义修改端口跟检测电平)时进行计时，电平变化后停止计时。
  22          
  23          数码管显示脉冲信号宽度，单位0.1ms，测量范围0.1ms~6553.5ms.
  24          
  25          下载时, 选择时钟 24MHZ (用户可自行修改频率).
  26          
  27          ******************************************/
  28          
  29          #include "reg51.h"
  30          
  31          #define     MAIN_Fosc       24000000UL  //定义主时钟
  32          
  33          
  34          typedef     unsigned char   u8;
  35          typedef     unsigned int    u16;
  36          typedef     unsigned long   u32;
  37          
  38          sfr INT_CLKO = 0x8F;
  39          sfr AUXR = 0x8E;
  40          sfr IE2  = 0xAF;
  41          sfr T2H  = 0xD6;
  42          sfr T2L  = 0xD7;
  43          
  44          sfr P4   = 0xC0;
  45          sfr P5   = 0xC8;
  46          sfr P6   = 0xE8;
  47          sfr P7   = 0xF8;
  48          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  49          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  50          sfr P0M1 = 0x93;
  51          sfr P0M0 = 0x94;
  52          sfr P2M1 = 0x95;
  53          sfr P2M0 = 0x96;
  54          sfr P3M1 = 0xB1;
  55          sfr P3M0 = 0xB2;
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 2   

  56          sfr P4M1 = 0xB3;
  57          sfr P4M0 = 0xB4;
  58          sfr P5M1 = 0xC9;
  59          sfr P5M0 = 0xCA;
  60          sfr P6M1 = 0xCB;
  61          sfr P6M0 = 0xCC;
  62          sfr P7M1 = 0xE1;
  63          sfr P7M0 = 0xE2;
  64          
  65          sbit P00 = P0^0;
  66          sbit P01 = P0^1;
  67          sbit P02 = P0^2;
  68          sbit P03 = P0^3;
  69          sbit P04 = P0^4;
  70          sbit P05 = P0^5;
  71          sbit P06 = P0^6;
  72          sbit P07 = P0^7;
  73          sbit P10 = P1^0;
  74          sbit P11 = P1^1;
  75          sbit P12 = P1^2;
  76          sbit P13 = P1^3;
  77          sbit P14 = P1^4;
  78          sbit P15 = P1^5;
  79          sbit P16 = P1^6;
  80          sbit P17 = P1^7;
  81          sbit P20 = P2^0;
  82          sbit P21 = P2^1;
  83          sbit P22 = P2^2;
  84          sbit P23 = P2^3;
  85          sbit P24 = P2^4;
  86          sbit P25 = P2^5;
  87          sbit P26 = P2^6;
  88          sbit P27 = P2^7;
  89          sbit P30 = P3^0;
  90          sbit P31 = P3^1;
  91          sbit P32 = P3^2;
  92          sbit P33 = P3^3;
  93          sbit P34 = P3^4;
  94          sbit P35 = P3^5;
  95          sbit P36 = P3^6;
  96          sbit P37 = P3^7;
  97          sbit P40 = P4^0;
  98          sbit P41 = P4^1;
  99          sbit P42 = P4^2;
 100          sbit P43 = P4^3;
 101          sbit P44 = P4^4;
 102          sbit P45 = P4^5;
 103          sbit P46 = P4^6;
 104          sbit P47 = P4^7;
 105          sbit P50 = P5^0;
 106          sbit P51 = P5^1;
 107          sbit P52 = P5^2;
 108          sbit P53 = P5^3;
 109          sbit P54 = P5^4;
 110          sbit P55 = P5^5;
 111          sbit P56 = P5^6;
 112          sbit P57 = P5^7;
 113          sbit P60 = P6^0;
 114          sbit P61 = P6^1;
 115          sbit P62 = P6^2;
 116          sbit P63 = P6^3;
 117          sbit P64 = P6^4;
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 3   

 118          sbit P65 = P6^5;
 119          sbit P66 = P6^6;
 120          sbit P67 = P6^7;
 121          
 122          /****************************** 用户定义宏 ***********************************/
 123          #define Timer0_Reload   (MAIN_Fosc / 1000)      //Timer 0 中断频率, 1000次/秒
 124          #define Timer1_Reload   (MAIN_Fosc / 10000)     //Timer 1 中断频率, 10000次/秒
 125          
 126          #define DIS_DOT     0x20
 127          #define DIS_BLACK   0x10
 128          #define DIS_        0x11
 129          
 130          /***************************** 本地常量声明 **********************************/
 131          u8 code t_display[]={                       //标准字库
 132          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 133              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 134          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 135              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 136              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 137          
 138          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 139          
 140          /***************************** 本地变量声明 **********************************/
 141          u8  LED8[8];        //显示缓冲
 142          u8  display_index;  //显示位索引
 143          bit B_1ms;          //1ms标志
 144          u16 msecond;
 145          u16 Test_cnt;   //显示用的计数变量
 146          u16 Temp_cnt;   //测量用的计数变量
 147          
 148          /*****************************************************************************/
 149          
 150          void Timer0_init(void);
 151          void Timer1_init(void);
 152          void DisplayScan(void);
 153          void Display(void);
 154          
 155          //========================================================================
 156          // 函数: void main(void)
 157          // 描述: 主函数.
 158          // 参数: none.
 159          // 返回: none.
 160          // 版本: V1.0, 2015-1-12
 161          //========================================================================
 162          void main(void)
 163          {
 164   1          u8  i;
 165   1          
 166   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 167   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 168   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 169   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 170   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
 171   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 172   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 173   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 174   1      
 175   1          Test_cnt = 0;
 176   1          Temp_cnt = 0;
 177   1          for(i=0; i<8; i++)  LED8[i] = DIS_BLACK;    //上电消隐
 178   1          
 179   1          Timer0_init();
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 4   

 180   1          Timer1_init();
 181   1          EA = 1;     //打开总中断
 182   1      
 183   1          while (1)
 184   1          {
 185   2              if(B_1ms)   //1ms到
 186   2              {
 187   3                  B_1ms = 0;
 188   3                  if(++msecond >= 1000)   //1秒到
 189   3                  {
 190   4                      msecond = 0;        //清1000ms计数
 191   4                      Display();          //显示秒计数
 192   4                  }
 193   3              }
 194   2          }
 195   1      }
 196          
 197          //========================================================================
 198          // 函数: void Timer0_init(void)
 199          // 描述: timer0初始化函数.
 200          // 参数: none.
 201          // 返回: none.
 202          // 版本: V1.0, 2015-1-12
 203          //========================================================================
 204          void Timer0_init(void)
 205          {
 206   1              TR0 = 0;    //停止计数
 207   1      
 208   1          #if (Timer0_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer0设置的中断过快!"
              
                  #elif ((Timer0_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 212   1              ET0 = 1;    //允许中断
 213   1          //  PT0 = 1;    //高优先级中断
 214   1              TMOD &= ~0x03;
 215   1              TMOD |= 0;  //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3: 16位自动重装, 不可屏
             -蔽中断
 216   1          //  TMOD |=  0x04;  //对外计数或分频
 217   1              TMOD &= ~0x04;  //定时
 218   1          //  INT_CLKO |=  0x01;  //输出时钟
 219   1              INT_CLKO &= ~0x01;  //不输出时钟
 220   1      
 221   1              #if (Timer0_Reload < 65536UL)
 222   1                  AUXR |=  0x80;  //1T mode
 223   1                  TH0 = (u8)((65536UL - Timer0_Reload) / 256);
 224   1                  TL0 = (u8)((65536UL - Timer0_Reload) % 256);
 225   1              #else
                          AUXR &= ~0x80;  //12T mode
                          TH0 = (u8)((65536UL - Timer0_Reload/12) / 256);
                          TL0 = (u8)((65536UL - Timer0_Reload/12) % 256);
                      #endif
 230   1      
 231   1              TR0 = 1;    //开始运行
 232   1      
 233   1          #else
                      #error "Timer0设置的中断过慢!"
                  #endif
 236   1      }
 237          
 238          //========================================================================
 239          // 函数: void Timer1_init(void)
 240          // 描述: timer1初始化函数.
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 5   

 241          // 参数: none.
 242          // 返回: none.
 243          // 版本: V1.0, 2015-1-12
 244          //========================================================================
 245          void Timer1_init(void)
 246          {
 247   1              TR1 = 0;    //停止计数
 248   1      
 249   1          #if (Timer1_Reload < 64)    // 如果用户设置值不合适， 则不启动定时器
                      #error "Timer1设置的中断过快!"
              
                  #elif ((Timer1_Reload/12) < 65536UL)    // 如果用户设置值不合适， 则不启动定时器
 253   1              ET1 = 1;    //允许中断
 254   1          //  PT1 = 1;    //高优先级中断
 255   1              TMOD &= ~0x30;
 256   1              TMOD |= (0 << 4);   //工作模式, 0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 257   1          //  TMOD |=  0x40;  //对外计数或分频
 258   1              TMOD &= ~0x40;  //定时
 259   1          //  INT_CLKO |=  0x02;  //输出时钟
 260   1              INT_CLKO &= ~0x02;  //不输出时钟
 261   1      
 262   1              #if (Timer1_Reload < 65536UL)
 263   1                  AUXR |=  0x40;  //1T mode
 264   1                  TH1 = (u8)((65536UL - Timer1_Reload) / 256);
 265   1                  TL1 = (u8)((65536UL - Timer1_Reload) % 256);
 266   1              #else
                          AUXR &= ~0x40;  //12T mode
                          TH1 = (u8)((65536UL - Timer1_Reload/12) / 256);
                          TL1 = (u8)((65536UL - Timer1_Reload/12) % 256);
                      #endif
 271   1      
 272   1              TR1 = 1;    //开始运行
 273   1      
 274   1          #else
                      #error "Timer1设置的中断过慢!"
                  #endif
 277   1      }
 278          
 279          //========================================================================
 280          // 函数: void timer0_int (void) interrupt TIMER0_VECTOR
 281          // 描述:  timer0中断函数.
 282          // 参数: none.
 283          // 返回: none.
 284          // 版本: V1.0, 2015-1-12
 285          //========================================================================
 286          void timer0_int (void) interrupt 1
 287          {
 288   1          DisplayScan();  //1ms扫描显示一位
 289   1          B_1ms = 1;      //1ms标志
 290   1      }
 291          
 292          //========================================================================
 293          // 函数: void timer1_int (void) interrupt TIMER1_VECTOR
 294          // 描述:  timer1中断函数.
 295          // 参数: none.
 296          // 返回: none.
 297          // 版本: V1.0, 2015-1-12
 298          //========================================================================
 299          void timer1_int (void) interrupt 3
 300          {
 301   1         if(!P33)
 302   1         {
C51 COMPILER V9.59.0.0   TIMER                                                             06/17/2020 19:08:50 PAGE 6   

 303   2            Temp_cnt++;
 304   2         }
 305   1         else
 306   1         {
 307   2            if(Temp_cnt>0)
 308   2            {
 309   3               Test_cnt = Temp_cnt;
 310   3               Temp_cnt = 0;
 311   3            }
 312   2         }
 313   1      }
 314          
 315          /********************** 显示扫描函数 ************************/
 316          void DisplayScan(void)
 317          {   
 318   1         P7 = ~T_COM[7-display_index];
 319   1         P6 = ~t_display[LED8[display_index]];
 320   1         if(++display_index >= 8)   display_index = 0;  //8位结束回0
 321   1      }
 322          
 323          /********************** 显示计数函数 ************************/
 324          void Display(void)
 325          {
 326   1          u8  i;
 327   1          
 328   1          LED8[3] = Test_cnt / 10000;
 329   1          LED8[4] = (Test_cnt % 10000) / 1000;
 330   1          LED8[5] = (Test_cnt % 1000) / 100;
 331   1          LED8[6] = (Test_cnt % 100) / 10;
 332   1          LED8[7] = Test_cnt % 10;
 333   1          
 334   1          for(i=3; i<7; i++)  //消无效0
 335   1          {
 336   2              if(LED8[i] > 0) break;
 337   2              LED8[i] = DIS_BLACK;
 338   2          }
 339   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    452    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
