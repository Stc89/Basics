C51 COMPILER V9.00   TASK_SWITCH                                                           10/13/2020 20:35:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TASK_SWITCH
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE task_switch.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\task_switch.lst) S
                    -RC(.\Objects\task_switch.SRC)

line level    source

   1          #include "task_switch.h"
   2          #include "reg51.h"
   3          #include "core.h"
   4          
   5          
   6          /* 进入临界段 */
   7          char os_cpu_sr_save(void)
   8          {
   9   1              __asm mov r7,IE         //得到 「IE」中断控制寄存器值
  10   1              __asm mov IE,#0
  11   1              __asm ret                       //返回值是在r7中
  12   1              return 0;                       //返回这条指令实际不会被执行到,但因为这个函数确实要返回值,所以写一下(不然会有警告)
  13   1      }
  14          
  15          
  16          /* 退出临界段 */
  17          void os_cpu_sr_restore(char cpu_sr)
  18          {
  19   1              cpu_sr = cpu_sr;        //第一个参数(char类型)是存在r7里面的,
  20   1              __asm mov IE,r7         //恢复中断控制寄存器值
  21   1              __asm ret                       //也可以没有(函数会有ret)
  22   1      }
  23          
  24          
  25          
  26          /* 任务堆栈初始化 */
  27          unsigned char os_tesk_stack_init(unsigned char stack_point)
  28          {
  29   1              unsigned char r_sp = SP;
  30   1              SP = stack_point;       //寄存器入栈(在此之前不能有任何运算操作,不然会改变寄存器值)
  31   1              __asm PUSH ACC          //累加器        
  32   1              __asm PUSH B            //用于乘除的寄存器
  33   1              __asm PUSH DPH          //数据指针，用途大
  34   1              __asm PUSH DPL          //数据指针，用途大
  35   1              __asm PUSH PSW          //标志位寄存器
  36   1              __asm PUSH 0
  37   1              __asm PUSH 1
  38   1              __asm PUSH 2
  39   1              __asm PUSH 3
  40   1              __asm PUSH 4
  41   1              __asm PUSH 5
  42   1              __asm PUSH 6
  43   1              __asm PUSH 7
  44   1      
  45   1              stack_point = SP;
  46   1              SP = r_sp;
  47   1      
  48   1              return stack_point;
  49   1      }
  50          
  51          
  52          /*因为没有对PC直接操作的指令,但中断过程和过程调用可以使PC入栈,
  53          中断返回,过程返回可以,使PC出栈,可以间接的利用此方法对PC操作*/
  54          
C51 COMPILER V9.00   TASK_SWITCH                                                           10/13/2020 20:35:49 PAGE 2   

  55          /* 系统延时 */
  56          void os_delay(unsigned char tisks)
  57          {
  58   1              unsigned char i;
  59   1      
  60   1              if(tisks > 0)
  61   1              {
  62   2                      EA = 0;                                         //直接操作,而不用临界段的方法主要是为了任务切换更快
  63   2                      /*压栈*/
  64   2                      __asm PUSH ACC                          //寄存器入栈(在此之前不能有任何运算操作,不然会改变寄存器值)
  65   2                      __asm PUSH B
  66   2                      __asm PUSH DPH
  67   2                      __asm PUSH DPL
  68   2                      __asm PUSH PSW
  69   2                      __asm PUSH 0
  70   2                      __asm PUSH 1
  71   2                      __asm PUSH 2
  72   2                      __asm PUSH 3
  73   2                      __asm PUSH 4
  74   2                      __asm PUSH 5
  75   2                      __asm PUSH 6
  76   2                      __asm PUSH 7
  77   2                      os_tcb[os_task_running_id].os_task_stcak_top = SP;
  78   2                      os_tcb[os_task_running_id].os_tsak_wait_tick = tisks;   //延时时间
  79   2                      os_tcb[os_task_running_id].suspend = 1;                                 //因为有延时,所以先挂起本任务
  80   2                      for(i=0; i<MAX_TASK; i++)                                                               //找到已经就绪,未被挂起,且优先级最高的任务
  81   2                      {
  82   3                              if(os_task_rdy_tab & os_map_tab[i])
  83   3                              {
  84   4                                      if(0 == os_tcb[i].suspend)
  85   4                                      {
  86   5                                              break;
  87   5                                      }
  88   4                              }
  89   3                      }
  90   2                      /*可执行的最高优先级任务*/
  91   2                      os_task_running_id = i;
  92   2      
  93   2                      SP = os_tcb[os_task_running_id].os_task_stcak_top;      //最高优先级任务的栈顶
  94   2                      /*出栈*/
  95   2                      __asm POP 7
  96   2                      __asm POP 6
  97   2                      __asm POP 5
  98   2                      __asm POP 4
  99   2                      __asm POP 3
 100   2                      __asm POP 2
 101   2                      __asm POP 1
 102   2                      __asm POP 0
 103   2                      __asm POP PSW
 104   2                      __asm POP DPL
 105   2                      __asm POP DPH
 106   2                      __asm POP B
 107   2                      __asm POP ACC
 108   2                      EA = 1;
 109   2              }
 110   1      }
 111          
 112          /* 系统心跳更新 */
 113          void os_time_tick(void)
 114          {
 115   1              unsigned char i;
 116   1              
C51 COMPILER V9.00   TASK_SWITCH                                                           10/13/2020 20:35:49 PAGE 3   

 117   1              for(i=0; i<MAX_TASK; i++)
 118   1              {
 119   2                      if(os_tcb[i].os_tsak_wait_tick)
 120   2                      {
 121   3                              os_tcb[i].os_tsak_wait_tick--;
 122   3                              /*没有等待时间,则任务进入就绪状态*/
 123   3                              if(0 == os_tcb[i].os_tsak_wait_tick)
 124   3                              {
 125   4                                      os_tcb[i].suspend = 0;
 126   4                              }
 127   3                      }
 128   2              }
 129   1      }
 130          
 131          /* 
 132          任务切换心跳 5ms
 133          interrupt 1是定时器中断 
 134          using 0 默认用,所有的寄存器会自动入栈
 135          用using 1 2 3 则需要手动对r0-r7入栈,出栈(请查看寄存器组选择(看任意一本讲51的书))
 136          */
 137          void timer0_isr(void) interrupt 1
 138          {
 139   1              unsigned char i;
 140   1              char cpu_sr;
 141   1      
 142   1              if(os_true == os_running)
 143   1              {
 144   2                      os_enter_critical();
 145   2                      os_int_enter();
 146   2                      
 147   2                      os_time_tick();
 148   2                      /*当然,51单片机最多只能有一次中断嵌套,os_int_count最大为2(+本次)*/
 149   2                      if(1 == os_int_count)
 150   2                      {
 151   3                              os_tcb[os_task_running_id].os_task_stcak_top = SP;      
 152   3                              /*找到已经就绪,未被挂起,且优先级最高的任务(任务调度器)*/
 153   3                              for(i=0; i<MAX_TASK; i++)
 154   3                              {
 155   4                                      if(os_task_rdy_tab & os_map_tab[i])
 156   4                                      {
 157   5                                              /*用suspend 判断休眠时间已经到，可以执行任务部分*/
 158   5                                              if(0 == os_tcb[i].suspend)
 159   5                                              {
 160   6                                                      break;
 161   6                                              }
 162   5                                      }
 163   4                              }
 164   3                              /*现在执行的任务就是优先级最高的,所以不需要任务切换*/
 165   3                              if(os_task_running_id != i)
 166   3                              {
 167   4                                      /*可执行的最高优先级任务*/
 168   4                                      os_task_running_id = i;
 169   4                                      /*最高优先级任务的栈顶*/
 170   4                                      /*SP是堆栈指针，指向栈顶*/
 171   4                                      SP = os_tcb[os_task_running_id].os_task_stcak_top;
 172   4                              }
 173   3                      }
 174   2                      /*清除中断标志*/
 175   2                      TF0 = 0;
 176   2                      /*时间重装载*/
 177   2                      TH0 = 0xee;
 178   2                      TL0 = 0x00;
C51 COMPILER V9.00   TASK_SWITCH                                                           10/13/2020 20:35:49 PAGE 4   

 179   2                      os_int_exit();
 180   2                      os_exit_critical();
 181   2              }
 182   1              
 183   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
