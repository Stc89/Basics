C51 COMPILER V9.00   MAIN                                                                  05/27/2020 10:09:55 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst) OBJECT(.\list\main.
                    -obj)

line level    source

   1          /******************************************
   2                  作者：神秘藏宝室
   3                  店铺：ILoveMCU.taobao.com
   4          ******************************************/
   5          
   6          
   7          #include        "config.h"
   8          #include        "delay.h"
   9          #include  "uart.h"
  10          
  11          /*************  功能说明        **************
  12          
  13          本程序演示LED闪烁  
  14          
  15          
  16          ******************************************/
  17          
  18          /*************  本地常量声明    **************/
  19          
  20          
  21          /*************  本地变量声明    **************/
  22          
  23          
  24          /*************  本地函数声明    **************/
  25          
  26          
  27          
  28          /*************  外部函数和变量声明 *****************/
  29          
  30          
  31          
  32          /******************** IO配置函数 **************************/
  33          void    GPIO_config(void)
  34          {
  35   1              P1M0 = 0x00;            //设置准双向口
  36   1              P1M1 = 0x00;
  37   1      
  38   1              P3M0 = 0x00;
  39   1              P3M1 = 0x00;
  40   1      }
  41          
  42          
  43          
  44          
  45          
  46          
  47          /******************** 主函数 **************************/
  48          void main(void)
  49          {
  50   1              P_SW1 = 0x00; //RXD/P3.0, TXD/P3.1
  51   1      
  52   1              GPIO_config();
  53   1              Uart_Init();
  54   1              
C51 COMPILER V9.00   MAIN                                                                  05/27/2020 10:09:55 PAGE 2   

  55   1              while(1)
  56   1              {
  57   2                      printf("uart test\r\n");
  58   2      
  59   2                      P16 = 0;
  60   2                      delay_ms(250);
  61   2                      delay_ms(250);
  62   2                      delay_ms(250);
  63   2                      delay_ms(250);
  64   2                      P16 = 1;
  65   2                      delay_ms(250);
  66   2                      delay_ms(250);
  67   2                      delay_ms(250);
  68   2                      delay_ms(250);
  69   2              }
  70   1      }
  71          //
  72          //
  73          //
  74          //
  75          //
  76          //#include "reg51.h"
  77          //#include "intrins.h"
  78          //sfr P0M1 = 0x93;
  79          //sfr P0M0 = 0x94;
  80          //sfr P1M1 = 0x91;
  81          //sfr P1M0 = 0x92;
  82          //sfr P2M1 = 0x95;
  83          //sfr P2M0 = 0x96;
  84          //sfr P3M1 = 0xb1;
  85          //sfr P3M0 = 0xb2;
  86          //sfr P4M1 = 0xb3;
  87          //sfr P4M0 = 0xb4;
  88          //sfr P5M1 = 0xc9;
  89          //sfr P5M0 = 0xca;
  90          //sfr IAP_DATA = 0xC2;
  91          //sfr IAP_ADDRH = 0xC3;
  92          //sfr IAP_ADDRL = 0xC4;
  93          //sfr IAP_CMD = 0xC5;
  94          //sfr IAP_TRIG = 0xC6;
  95          //sfr IAP_CONTR = 0xC7;
  96          //sfr IAP_TPS = 0xF5;
  97          //void IapIdle()
  98          //{
  99          //IAP_CONTR = 0; //关闭 IAP 功能
 100          //IAP_CMD = 0; //清除命令寄存器
 101          //IAP_TRIG = 0; //清除触发寄存器
 102          //IAP_ADDRH = 0x80; //将地址设置到非 IAP 区域
 103          //IAP_ADDRL = 0;
 104          //}
 105          //char IapRead(int addr)
 106          //{
 107          //char dat;
 108          //IAP_CONTR = 0x80; //使能 IAP
 109          //IAP_TPS = 12; //设置擦除等待参数 12MHz
 110          //IAP_CMD = 1; //设置 IAP 读命令
 111          //IAP_ADDRL = addr; //设置 IAP 低地址
 112          //IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 113          //IAP_TRIG = 0x5a; //写触发命令(0x5a)
 114          //IAP_TRIG = 0xa5; //写触发命令(0xa5)
 115          //_nop_();
 116          //dat = IAP_DATA; //读 IAP 数据
C51 COMPILER V9.00   MAIN                                                                  05/27/2020 10:09:55 PAGE 3   

 117          //IapIdle(); //关闭 IAP 功能
 118          //
 119          //return dat;
 120          //}
 121          //void IapProgram(int addr, char dat)
 122          //{
 123          //IAP_CONTR = 0x80; //使能 IAP
 124          //IAP_TPS = 12; //设置擦除等待参数 12MHz
 125          //IAP_CMD = 2; //设置 IAP 写命令
 126          //IAP_ADDRL = addr; //设置 IAP 低地址
 127          //IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 128          //IAP_DATA = dat; //写 IAP 数据
 129          //IAP_TRIG = 0x5a; //写触发命令(0x5a)
 130          //IAP_TRIG = 0xa5; //写触发命令(0xa5)
 131          //_nop_();
 132          //IapIdle(); //关闭 IAP 功能
 133          //}
 134          //void IapErase(int addr)
 135          //{
 136          //      IAP_CONTR = 0x80; //使能 IAP
 137          //      IAP_TPS = 12; //设置擦除等待参数 12MHz
 138          //      IAP_CMD = 3; //设置 IAP 擦除命令
 139          //      IAP_ADDRL = addr; //设置 IAP 低地址
 140          //      IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 141          //      IAP_TRIG = 0x5a; //写触发命令(0x5a)
 142          //      IAP_TRIG = 0xa5; //写触发命令(0xa5)
 143          //      _nop_(); //
 144          //      IapIdle(); //关闭 IAP 功能
 145          //}
 146          //void main()
 147          //{
 148          //      P0M0 = 0x00;
 149          //      P0M1 = 0x00;
 150          //      P1M0 = 0x00;
 151          //      P1M1 = 0x00;
 152          //      P2M0 = 0x00;
 153          //      P2M1 = 0x00;
 154          //      P3M0 = 0x00;
 155          //      P3M1 = 0x00;
 156          //      P4M0 = 0x00;
 157          //      P4M1 = 0x00;
 158          //      P5M0 = 0x00;
 159          //      P5M1 = 0x00;
 160          //      IapErase(0x0400);
 161          //      P0 = IapRead(0x0400); //P0=0xff
 162          //      IapProgram(0x0400, 0x12);
 163          //      P1 = IapRead(0x0400); //P1=0x12
 164          //      while (1);
 165          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     74    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
