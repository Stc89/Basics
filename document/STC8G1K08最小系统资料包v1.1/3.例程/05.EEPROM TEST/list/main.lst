C51 COMPILER V9.00   MAIN                                                                  05/27/2020 13:29:17 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: G:\2.develop\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst) OBJECT(.\
                    -list\main.obj)

line level    source

   1          /******************************************
   2                  作者：神秘藏宝室
   3                  店铺：ILoveMCU.taobao.com
   4          ******************************************/
   5          
   6          
   7          #include        "config.h"
   8          #include        "delay.h"
   9          #include  "uart.h"
  10          #include  "intrins.h"
  11          
  12          /*************  功能说明        **************
  13          
  14          本程序演示LED闪烁  
  15          
  16          
  17          ******************************************/
  18          
  19          /*************  本地常量声明    **************/
  20          
  21          
  22          /*************  本地变量声明    **************/
  23          
  24          
  25          /*************  本地函数声明    **************/
  26          
  27          
  28          
  29          /*************  外部函数和变量声明 *****************/
  30          
  31          
  32          
  33          /******************** IO配置函数 **************************/
  34          void    GPIO_config(void)
  35          {
  36   1              P1M0 = 0x00;            //设置准双向口
  37   1              P1M1 = 0x00;
  38   1      
  39   1              P3M0 = 0x00;
  40   1              P3M1 = 0x00;
  41   1      }
  42          
  43          
  44          void IapIdle()
  45          {
  46   1              IAP_CONTR = 0; //关闭 IAP 功能
  47   1              IAP_CMD = 0; //清除命令寄存器
  48   1              IAP_TRIG = 0; //清除触发寄存器
  49   1              IAP_ADDRH = 0x80; //将地址设置到非 IAP 区域
  50   1              IAP_ADDRL = 0;
  51   1      }
  52          
  53          char IapRead(int addr)
  54          {
C51 COMPILER V9.00   MAIN                                                                  05/27/2020 13:29:17 PAGE 2   

  55   1              char dat;
  56   1              IAP_CONTR = 0x80; //使能 IAP
  57   1              IAP_TPS = 12; //设置擦除等待参数 12MHz
  58   1              IAP_CMD = 1; //设置 IAP 读命令
  59   1              IAP_ADDRL = addr; //设置 IAP 低地址
  60   1              IAP_ADDRH = addr >> 8; //设置 IAP 高地址
  61   1              IAP_TRIG = 0x5a; //写触发命令(0x5a)
  62   1              IAP_TRIG = 0xa5; //写触发命令(0xa5)
  63   1              _nop_();
  64   1              dat = IAP_DATA; //读 IAP 数据
  65   1              IapIdle(); //关闭 IAP 功能
  66   1      
  67   1      return dat;
  68   1      }
  69          
  70          void IapProgram(int addr, char dat)
  71          {
  72   1              IAP_CONTR = 0x80; //使能 IAP
  73   1              IAP_TPS = 12; //设置擦除等待参数 12MHz
  74   1              IAP_CMD = 2; //设置 IAP 写命令
  75   1              IAP_ADDRL = addr; //设置 IAP 低地址
  76   1              IAP_ADDRH = addr >> 8; //设置 IAP 高地址
  77   1              IAP_DATA = dat; //写 IAP 数据
  78   1              IAP_TRIG = 0x5a; //写触发命令(0x5a)
  79   1              IAP_TRIG = 0xa5; //写触发命令(0xa5)
  80   1              _nop_();
  81   1              IapIdle(); //关闭 IAP 功能
  82   1      }
  83          void IapErase(int addr)
  84          {
  85   1              IAP_CONTR = 0x80; //使能 IAP
  86   1              IAP_TPS = 12; //设置擦除等待参数 12MHz
  87   1              IAP_CMD = 3; //设置 IAP 擦除命令
  88   1              IAP_ADDRL = addr; //设置 IAP 低地址
  89   1              IAP_ADDRH = addr >> 8; //设置 IAP 高地址
  90   1              IAP_TRIG = 0x5a; //写触发命令(0x5a)
  91   1              IAP_TRIG = 0xa5; //写触发命令(0xa5)
  92   1              _nop_(); //
  93   1              IapIdle(); //关闭 IAP 功能
  94   1      }
  95          
  96          
  97          
  98          /******************** 主函数 **************************/
  99          void main(void)
 100          {
 101   1              char test = 0;
 102   1              P_SW1 = 0x00; //RXD/P3.0, TXD/P3.1
 103   1      
 104   1              GPIO_config();
 105   1              Uart_Init();
 106   1      
 107   1              
 108   1              
 109   1              while(1)
 110   1              {
 111   2                      printf("uart test\r\n");
 112   2      
 113   2      //              IapErase(0x0400);
 114   2      //              test = IapRead(0x0400); //P0=0xff
 115   2      //              printf("Erase:%x\r\n",test);
 116   2                      IapProgram(0x0400, 0x22);
C51 COMPILER V9.00   MAIN                                                                  05/27/2020 13:29:17 PAGE 3   

 117   2                      test = IapRead(0x0400); //P1=0x12
 118   2                      printf("Program:%x\r\n",test);
 119   2      
 120   2                      P16 = 0;
 121   2                      delay_ms(250);
 122   2                      delay_ms(250);
 123   2                      delay_ms(250);
 124   2                      delay_ms(250);
 125   2                      P16 = 1;
 126   2                      delay_ms(250);
 127   2                      delay_ms(250);
 128   2                      delay_ms(250);
 129   2                      delay_ms(250);
 130   2              }
 131   1      }
 132          //
 133          //
 134          //
 135          //
 136          //
 137          //#include "reg51.h"
 138          //#include "intrins.h"
 139          //sfr P0M1 = 0x93;
 140          //sfr P0M0 = 0x94;
 141          //sfr P1M1 = 0x91;
 142          //sfr P1M0 = 0x92;
 143          //sfr P2M1 = 0x95;
 144          //sfr P2M0 = 0x96;
 145          //sfr P3M1 = 0xb1;
 146          //sfr P3M0 = 0xb2;
 147          //sfr P4M1 = 0xb3;
 148          //sfr P4M0 = 0xb4;
 149          //sfr P5M1 = 0xc9;
 150          //sfr P5M0 = 0xca;
 151          //sfr IAP_DATA = 0xC2;
 152          //sfr IAP_ADDRH = 0xC3;
 153          //sfr IAP_ADDRL = 0xC4;
 154          //sfr IAP_CMD = 0xC5;
 155          //sfr IAP_TRIG = 0xC6;
 156          //sfr IAP_CONTR = 0xC7;
 157          //sfr IAP_TPS = 0xF5;
 158          //void IapIdle()
 159          //{
 160          //IAP_CONTR = 0; //关闭 IAP 功能
 161          //IAP_CMD = 0; //清除命令寄存器
 162          //IAP_TRIG = 0; //清除触发寄存器
 163          //IAP_ADDRH = 0x80; //将地址设置到非 IAP 区域
 164          //IAP_ADDRL = 0;
 165          //}
 166          //char IapRead(int addr)
 167          //{
 168          //char dat;
 169          //IAP_CONTR = 0x80; //使能 IAP
 170          //IAP_TPS = 12; //设置擦除等待参数 12MHz
 171          //IAP_CMD = 1; //设置 IAP 读命令
 172          //IAP_ADDRL = addr; //设置 IAP 低地址
 173          //IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 174          //IAP_TRIG = 0x5a; //写触发命令(0x5a)
 175          //IAP_TRIG = 0xa5; //写触发命令(0xa5)
 176          //_nop_();
 177          //dat = IAP_DATA; //读 IAP 数据
 178          //IapIdle(); //关闭 IAP 功能
C51 COMPILER V9.00   MAIN                                                                  05/27/2020 13:29:17 PAGE 4   

 179          //
 180          //return dat;
 181          //}
 182          //void IapProgram(int addr, char dat)
 183          //{
 184          //IAP_CONTR = 0x80; //使能 IAP
 185          //IAP_TPS = 12; //设置擦除等待参数 12MHz
 186          //IAP_CMD = 2; //设置 IAP 写命令
 187          //IAP_ADDRL = addr; //设置 IAP 低地址
 188          //IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 189          //IAP_DATA = dat; //写 IAP 数据
 190          //IAP_TRIG = 0x5a; //写触发命令(0x5a)
 191          //IAP_TRIG = 0xa5; //写触发命令(0xa5)
 192          //_nop_();
 193          //IapIdle(); //关闭 IAP 功能
 194          //}
 195          //void IapErase(int addr)
 196          //{
 197          //      IAP_CONTR = 0x80; //使能 IAP
 198          //      IAP_TPS = 12; //设置擦除等待参数 12MHz
 199          //      IAP_CMD = 3; //设置 IAP 擦除命令
 200          //      IAP_ADDRL = addr; //设置 IAP 低地址
 201          //      IAP_ADDRH = addr >> 8; //设置 IAP 高地址
 202          //      IAP_TRIG = 0x5a; //写触发命令(0x5a)
 203          //      IAP_TRIG = 0xa5; //写触发命令(0xa5)
 204          //      _nop_(); //
 205          //      IapIdle(); //关闭 IAP 功能
 206          //}
 207          //void main()
 208          //{
 209          //      P0M0 = 0x00;
 210          //      P0M1 = 0x00;
 211          //      P1M0 = 0x00;
 212          //      P1M1 = 0x00;
 213          //      P2M0 = 0x00;
 214          //      P2M1 = 0x00;
 215          //      P3M0 = 0x00;
 216          //      P3M1 = 0x00;
 217          //      P4M0 = 0x00;
 218          //      P4M1 = 0x00;
 219          //      P5M0 = 0x00;
 220          //      P5M1 = 0x00;
 221          //      IapErase(0x0400);
 222          //      P0 = IapRead(0x0400); //P0=0xff
 223          //      IapProgram(0x0400, 0x12);
 224          //      P1 = IapRead(0x0400); //P1=0x12
 225          //      while (1);
 226          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    197    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
